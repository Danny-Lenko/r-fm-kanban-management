{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { setDeletingBoard, setDeletingTask, setBoards, assignActiveBoard } from '../../../../../main/slices';\nimport { useAppSelector, useAppDispatch } from '../../../hooks';\nexport const useDeleteModal = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const {\n    deletingBoard\n  } = useAppSelector(state => state.modals);\n  const {\n    activeBoard,\n    activeColId,\n    activeTaskId,\n    boards\n  } = useAppSelector(state => state.data);\n  const activeCol = activeBoard.columns.find(col => col.id === activeColId);\n  const activeTask = activeCol === null || activeCol === void 0 ? void 0 : activeCol.tasks.find(task => task.id === activeTaskId);\n  const deleteBoard = () => {\n    const boardsUpdated = boards.filter(board => board.id !== activeBoard.id).map((board, i) => ({\n      ...board,\n      id: i\n    }));\n    dispatch(setBoards(boardsUpdated));\n    navigate('/');\n    if (boards.length <= 1) {\n      const zeroBoards = [{\n        id: 0,\n        name: 'Zero Board',\n        columns: [],\n        path: 'zero-board'\n      }];\n      dispatch(setBoards(zeroBoards));\n    }\n    dispatch(assignActiveBoard(0));\n    handleClose();\n  };\n  const deleteTask = () => {\n    const boardsUpdated = boards.map((board, i) => board.id !== activeBoard.id ? board : {\n      ...board,\n      columns: board.columns.map(col => col.id !== activeColId ? col : {\n        ...col,\n        tasks: col.tasks.filter(task => task.id !== activeTaskId).map((task, i) => ({\n          ...task,\n          id: i\n        }))\n      })\n    });\n    dispatch(setBoards(boardsUpdated));\n    dispatch(assignActiveBoard(activeBoard.id));\n    handleClose();\n  };\n  function handleClose() {\n    dispatch(setDeletingBoard(false));\n    dispatch(setDeletingTask(false));\n  }\n  const handleDelete = deletingBoard ? deleteBoard : deleteTask;\n  return {\n    deletingBoard,\n    activeBoard,\n    activeTask,\n    handleDelete,\n    handleClose\n  };\n};\n_s(useDeleteModal, \"VIBq5yGgpS4H1IJuFYzK4gM+e74=\", false, function () {\n  return [useAppDispatch, useNavigate, useAppSelector, useAppSelector];\n});","map":{"version":3,"names":["useNavigate","setDeletingBoard","setDeletingTask","setBoards","assignActiveBoard","useAppSelector","useAppDispatch","useDeleteModal","dispatch","navigate","deletingBoard","state","modals","activeBoard","activeColId","activeTaskId","boards","data","activeCol","columns","find","col","id","activeTask","tasks","task","deleteBoard","boardsUpdated","filter","board","map","i","length","zeroBoards","name","path","handleClose","deleteTask","handleDelete"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/DeleteModal/useDeleteModal.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport {\n   setDeletingBoard,\n   setDeletingTask,\n   setBoards,\n   assignActiveBoard,\n} from '../../../../../main/slices';\nimport { useAppSelector, useAppDispatch } from '../../../hooks';\n\nexport const useDeleteModal = () => {\n   const dispatch = useAppDispatch();\n   const navigate = useNavigate();\n\n   const { deletingBoard } = useAppSelector((state) => state.modals);\n   const { activeBoard, activeColId, activeTaskId, boards } = useAppSelector(\n      (state) => state.data,\n   );\n\n   const activeCol = activeBoard.columns.find((col) => col.id === activeColId);\n   const activeTask = activeCol?.tasks.find((task) => task.id === activeTaskId);\n\n   const deleteBoard = () => {\n      const boardsUpdated = boards\n         .filter((board) => board.id !== activeBoard.id)\n         .map((board, i) => ({ ...board, id: i }));\n\n      dispatch(setBoards(boardsUpdated));\n      navigate('/');\n\n      if (boards.length <= 1) {\n         const zeroBoards = [\n            { id: 0, name: 'Zero Board', columns: [], path: 'zero-board' },\n         ];\n         dispatch(setBoards(zeroBoards));\n      }\n\n      dispatch(assignActiveBoard(0));\n      handleClose();\n   };\n\n   const deleteTask = () => {\n      const boardsUpdated = boards.map((board, i) =>\n         board.id !== activeBoard.id\n            ? board\n            : {\n                 ...board,\n                 columns: board.columns.map((col) =>\n                    col.id !== activeColId\n                       ? col\n                       : {\n                            ...col,\n                            tasks: col.tasks\n                               .filter((task) => task.id !== activeTaskId)\n                               .map((task, i) => ({ ...task, id: i })),\n                         },\n                 ),\n              },\n      );\n\n      dispatch(setBoards(boardsUpdated));\n      dispatch(assignActiveBoard(activeBoard.id));\n      handleClose();\n   };\n\n   function handleClose() {\n      dispatch(setDeletingBoard(false));\n      dispatch(setDeletingTask(false));\n   }\n\n   const handleDelete = deletingBoard ? deleteBoard : deleteTask;\n\n   return { deletingBoard, activeBoard, activeTask, handleDelete, handleClose };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}