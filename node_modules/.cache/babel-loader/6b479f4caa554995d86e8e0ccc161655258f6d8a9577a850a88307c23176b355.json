{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/modules/Board/Board.tsx\",\n  _s = $RefreshSig$();\nimport { useAppSelector, useAppDispatch } from '../../library/common/hooks';\nimport TaskCard from './TaskCard';\nimport Stack from '@mui/material/Stack';\nimport { Typography, useTheme } from '@mui/material';\nimport { setBoards, assignActiveBoard } from '../../main/slices/dataSlice';\nimport { COLUMNCOLORS } from '../../library/common/constants';\nimport { CssBoard, CssInteractiveScreen, CssColumn, CssColorLabel, CssColumnButton } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Board = () => {\n  _s();\n  const theme = useTheme();\n  const drawerOpen = useAppSelector(state => state.drawer.open);\n  const {\n    activeBoard,\n    boards\n  } = useAppSelector(state => state.data);\n  const columns = activeBoard.columns;\n  const dispatch = useAppDispatch();\n  function addNewColumn() {\n    const boardsUpdated = boards.map(board => board.id !== activeBoard.id ? board : {\n      ...board,\n      columns: [...board.columns, {\n        id: board.columns.length,\n        name: `NewColumn${board.columns.length + 1}`,\n        tasks: [],\n        color: COLUMNCOLORS[board.columns.length] ? COLUMNCOLORS[board.columns.length] : '#E4EBFA'\n      }]\n    });\n    dispatch(setBoards(boardsUpdated));\n    dispatch(assignActiveBoard(activeBoard.id));\n  }\n  return /*#__PURE__*/_jsxDEV(CssBoard, {\n    children: [/*#__PURE__*/_jsxDEV(CssInteractiveScreen, {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        pr: 2,\n        pb: 3,\n        direction: \"row\",\n        spacing: 3,\n        children: columns.map(col => {\n          /*#__PURE__*/_jsxDEV(CssColumn, {\n            className: \"rows-stack\",\n            spacing: 2.5,\n            children: [/*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(CssColorLabel\n              // className='color'\n              // style={{ backgroundColor: col.color }}\n              , {\n                colorProp: col.color\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                children: [col.name, \" (\", col.tasks.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 22\n            }, this), col.tasks.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n              task: task\n            }, task.title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this))]\n          }, col.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(CssColumnButton, {\n      onClick: addNewColumn,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"+ New Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n_s(Board, \"MVPBD0J/IQslWFhzt/OuilQQ7sE=\", false, function () {\n  return [useTheme, useAppSelector, useAppSelector, useAppDispatch];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useAppSelector","useAppDispatch","TaskCard","Stack","Typography","useTheme","setBoards","assignActiveBoard","COLUMNCOLORS","CssBoard","CssInteractiveScreen","CssColumn","CssColorLabel","CssColumnButton","Board","theme","drawerOpen","state","drawer","open","activeBoard","boards","data","columns","dispatch","addNewColumn","boardsUpdated","map","board","id","length","name","tasks","color","col","task","title"],"sources":["/home/danny/projects/r-fm-kanban-management/src/modules/Board/Board.tsx"],"sourcesContent":["import { useAppSelector, useAppDispatch } from '../../library/common/hooks';\nimport TaskCard from './TaskCard';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport { Typography, useTheme } from '@mui/material';\nimport { setBoards, assignActiveBoard } from '../../main/slices/dataSlice';\nimport { COLUMNCOLORS } from '../../library/common/constants';\nimport {\n   CssBoard,\n   CssInteractiveScreen,\n   CssColumn,\n   CssColorLabel,\n   CssColumnButton,\n} from '.';\n\nexport const Board = () => {\n   const theme = useTheme();\n   const drawerOpen = useAppSelector((state) => state.drawer.open);\n   const { activeBoard, boards } = useAppSelector((state) => state.data);\n   const columns = activeBoard.columns;\n   const dispatch = useAppDispatch();\n\n   function addNewColumn() {\n      const boardsUpdated = boards.map((board) =>\n         board.id !== activeBoard.id\n            ? board\n            : {\n                 ...board,\n                 columns: [\n                    ...board.columns,\n                    {\n                       id: board.columns.length,\n                       name: `NewColumn${board.columns.length + 1}`,\n                       tasks: [],\n                       color: COLUMNCOLORS[board.columns.length]\n                          ? COLUMNCOLORS[board.columns.length]\n                          : '#E4EBFA',\n                    },\n                 ],\n              },\n      );\n\n      dispatch(setBoards(boardsUpdated));\n      dispatch(assignActiveBoard(activeBoard.id));\n   }\n\n   return (\n      <CssBoard>\n         <CssInteractiveScreen>\n            <Stack pr={2} pb={3} direction='row' spacing={3}>\n               {columns.map((col) => {\n                  <CssColumn\n                     key={col.name}\n                     className='rows-stack'\n                     spacing={2.5}\n                  >\n                     <Stack direction='row' spacing={1}>\n                        <CssColorLabel\n                           // className='color'\n                           // style={{ backgroundColor: col.color }}\n                           colorProp={col.color}\n                        ></CssColorLabel>\n                        <Typography variant='h5'>\n                           {col.name} ({col.tasks.length})\n                        </Typography>\n                     </Stack>\n                     {col.tasks.map((task) => (\n                        <TaskCard key={task.title} task={task} />\n                     ))}\n                  </CssColumn>;\n               })}\n            </Stack>\n         </CssInteractiveScreen>\n\n         <CssColumnButton onClick={addNewColumn}>\n            <Typography variant='h2'>+ New Column</Typography>\n         </CssColumnButton>\n      </CssBoard>\n   );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}