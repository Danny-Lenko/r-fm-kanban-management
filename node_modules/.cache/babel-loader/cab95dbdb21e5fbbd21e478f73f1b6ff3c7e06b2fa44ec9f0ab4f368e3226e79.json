{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/modules/Layout/AppBar/AppBar.tsx\",\n  _s = $RefreshSig$();\nimport { Toolbar, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\nimport ExpandLessRoundedIcon from '@mui/icons-material/ExpandLessRounded';\nimport { useAppDispatch, useAppSelector } from '../../../library/common/hooks';\nimport { setXsBoardsOpen } from '../../../main/slices/modalSlice';\nimport { ButtonsBox, CssAppBar, CssLogo, CssLogoWrapper, CssBoardTitle } from '.';\nimport logoDark from '../../../resources/assets/logo-dark.svg';\nimport logoLight from '../../../resources/assets/logo-light.svg';\nimport logoMobile from '../../../resources/assets/logo-mobile.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppBar = () => {\n  _s();\n  const {\n    drawer,\n    modals,\n    data\n  } = useAppSelector(state => state);\n  const {\n    open\n  } = drawer;\n  const {\n    xsBoardsOpen\n  } = modals;\n  const {\n    activeBoard\n  } = data;\n  const dispatch = useAppDispatch();\n  const theme = useTheme();\n  const {\n    breakpoints\n  } = theme;\n  const xsScreen = useMediaQuery(breakpoints.down('sm'));\n  const handleClick = () => xsScreen && (xsBoardsOpen ? dispatch(setXsBoardsOpen(false)) : dispatch(setXsBoardsOpen(true)));\n  const logo = xsScreen ? logoMobile : theme.palette.mode === 'light' ? logoDark : logoLight;\n  return /*#__PURE__*/_jsxDEV(CssAppBar, {\n    open: open,\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      children: [/*#__PURE__*/_jsxDEV(CssLogoWrapper, {\n        open: open,\n        children: /*#__PURE__*/_jsxDEV(CssLogo, {\n          src: logo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CssBoardTitle, {\n        onClick: handleClick,\n        children: activeBoard.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), xsScreen && (xsBoardsOpen ? /*#__PURE__*/_jsxDEV(ExpandLessRoundedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreRoundedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }, this)), /*#__PURE__*/_jsxDEV(ButtonsBox, {\n        xsScreen: xsScreen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n};\n_s(AppBar, \"YzVR6dQglv9W7+PAHCAK3ZXRi8s=\", false, function () {\n  return [useAppSelector, useAppDispatch, useTheme, useMediaQuery];\n});\n_c = AppBar;\nvar _c;\n$RefreshReg$(_c, \"AppBar\");","map":{"version":3,"names":["Toolbar","useMediaQuery","useTheme","ExpandMoreRoundedIcon","ExpandLessRoundedIcon","useAppDispatch","useAppSelector","setXsBoardsOpen","ButtonsBox","CssAppBar","CssLogo","CssLogoWrapper","CssBoardTitle","logoDark","logoLight","logoMobile","AppBar","drawer","modals","data","state","open","xsBoardsOpen","activeBoard","dispatch","theme","breakpoints","xsScreen","down","handleClick","logo","palette","mode","name"],"sources":["/home/danny/projects/r-fm-kanban-management/src/modules/Layout/AppBar/AppBar.tsx"],"sourcesContent":["import { Toolbar, useMediaQuery } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\nimport ExpandLessRoundedIcon from '@mui/icons-material/ExpandLessRounded';\n\nimport { useAppDispatch, useAppSelector } from '../../../library/common/hooks';\nimport { setXsBoardsOpen } from '../../../main/slices/modalSlice';\n\nimport {\n   ButtonsBox,\n   CssAppBar,\n   CssLogo,\n   CssLogoWrapper,\n   CssBoardTitle,\n} from '.';\n\nimport logoDark from '../../../resources/assets/logo-dark.svg';\nimport logoLight from '../../../resources/assets/logo-light.svg';\nimport logoMobile from '../../../resources/assets/logo-mobile.svg';\n\nexport const AppBar = () => {\n   const { drawer, modals, data } = useAppSelector((state) => state);\n   const { open } = drawer;\n   const { xsBoardsOpen } = modals;\n   const { activeBoard } = data;\n\n   const dispatch = useAppDispatch();\n\n   const theme = useTheme();\n   const { breakpoints } = theme;\n   const xsScreen = useMediaQuery(breakpoints.down('sm'));\n\n   const handleClick = () =>\n      xsScreen &&\n      (xsBoardsOpen\n         ? dispatch(setXsBoardsOpen(false))\n         : dispatch(setXsBoardsOpen(true)));\n\n   const logo = xsScreen\n      ? logoMobile\n      : theme.palette.mode === 'light'\n      ? logoDark\n      : logoLight;\n\n   return (\n      <CssAppBar open={open}>\n         <Toolbar>\n            <CssLogoWrapper open={open}>\n               <CssLogo src={logo} />\n            </CssLogoWrapper>\n\n            <CssBoardTitle onClick={handleClick} children={activeBoard.name} />\n\n            {xsScreen &&\n               (xsBoardsOpen ? (\n                  <ExpandLessRoundedIcon />\n               ) : (\n                  <ExpandMoreRoundedIcon />\n               ))}\n\n            <ButtonsBox xsScreen={xsScreen} />\n         </Toolbar>\n      </CssAppBar>\n   );\n};\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,aAAa,QAAQ,eAAe;AACtD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAOC,qBAAqB,MAAM,uCAAuC;AACzE,OAAOC,qBAAqB,MAAM,uCAAuC;AAEzE,SAASC,cAAc,EAAEC,cAAc,QAAQ,+BAA+B;AAC9E,SAASC,eAAe,QAAQ,iCAAiC;AAEjE,SACGC,UAAU,EACVC,SAAS,EACTC,OAAO,EACPC,cAAc,EACdC,aAAa,QACT,GAAG;AAEV,OAAOC,QAAQ,MAAM,yCAAyC;AAC9D,OAAOC,SAAS,MAAM,0CAA0C;AAChE,OAAOC,UAAU,MAAM,2CAA2C;AAAC;AAEnE,OAAO,MAAMC,MAAM,GAAG,MAAM;EAAA;EACzB,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAGb,cAAc,CAAEc,KAAK,IAAKA,KAAK,CAAC;EACjE,MAAM;IAAEC;EAAK,CAAC,GAAGJ,MAAM;EACvB,MAAM;IAAEK;EAAa,CAAC,GAAGJ,MAAM;EAC/B,MAAM;IAAEK;EAAY,CAAC,GAAGJ,IAAI;EAE5B,MAAMK,QAAQ,GAAGnB,cAAc,EAAE;EAEjC,MAAMoB,KAAK,GAAGvB,QAAQ,EAAE;EACxB,MAAM;IAAEwB;EAAY,CAAC,GAAGD,KAAK;EAC7B,MAAME,QAAQ,GAAG1B,aAAa,CAACyB,WAAW,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;EAEtD,MAAMC,WAAW,GAAG,MACjBF,QAAQ,KACPL,YAAY,GACRE,QAAQ,CAACjB,eAAe,CAAC,KAAK,CAAC,CAAC,GAChCiB,QAAQ,CAACjB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;EAExC,MAAMuB,IAAI,GAAGH,QAAQ,GAChBZ,UAAU,GACVU,KAAK,CAACM,OAAO,CAACC,IAAI,KAAK,OAAO,GAC9BnB,QAAQ,GACRC,SAAS;EAEd,oBACG,QAAC,SAAS;IAAC,IAAI,EAAEO,IAAK;IAAA,uBACnB,QAAC,OAAO;MAAA,wBACL,QAAC,cAAc;QAAC,IAAI,EAAEA,IAAK;QAAA,uBACxB,QAAC,OAAO;UAAC,GAAG,EAAES;QAAK;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACR,eAEjB,QAAC,aAAa;QAAC,OAAO,EAAED,WAAY;QAAC,QAAQ,EAAEN,WAAW,CAACU;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG,EAElEN,QAAQ,KACLL,YAAY,gBACV,QAAC,qBAAqB;QAAA;QAAA;QAAA;MAAA,QAAG,gBAEzB,QAAC,qBAAqB;QAAA;QAAA;QAAA;MAAA,QACxB,CAAC,eAEL,QAAC,UAAU;QAAC,QAAQ,EAAEK;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA;EAC3B;IAAA;IAAA;IAAA;EAAA,QACD;AAElB,CAAC;AAAC,GA5CWX,MAAM;EAAA,QACiBV,cAAc,EAK9BD,cAAc,EAEjBH,QAAQ,EAELD,aAAa;AAAA;AAAA,KAVpBe,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}