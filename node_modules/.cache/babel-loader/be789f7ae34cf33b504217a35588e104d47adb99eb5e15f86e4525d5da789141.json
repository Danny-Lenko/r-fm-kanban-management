{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport { setDeletingBoard, setDeletingTask, setSubmissionTrigger, setTaskEditing, setExistingTask, setBoardEditing, setIsExistingBoard, setXsBoardsOpen } from '../../../../main/slices';\nexport let ModalTypes;\n(function (ModalTypes) {\n  ModalTypes[ModalTypes[\"TaskManager\"] = 0] = \"TaskManager\";\n  ModalTypes[ModalTypes[\"TaskEditor\"] = 1] = \"TaskEditor\";\n  ModalTypes[ModalTypes[\"BoardEditor\"] = 2] = \"BoardEditor\";\n  ModalTypes[ModalTypes[\"Remover\"] = 3] = \"Remover\";\n  ModalTypes[ModalTypes[\"XsBoards\"] = 4] = \"XsBoards\";\n})(ModalTypes || (ModalTypes = {}));\nexport const useAppModal = () => {\n  _s();\n  const {\n    taskManaging,\n    taskEditing,\n    boardEditing,\n    deletingBoard,\n    deletingTask,\n    xsBoardsOpen\n  } = useAppSelector(state => state.modals);\n  const open = taskManaging || taskEditing || boardEditing || deletingBoard || deletingTask || xsBoardsOpen;\n  const dispatch = useAppDispatch();\n  const type = deletingBoard ? ModalTypes.Remover : taskManaging ? ModalTypes.TaskManager : taskEditing ? ModalTypes.TaskEditor : boardEditing ? ModalTypes.BoardEditor : xsBoardsOpen ? ModalTypes.XsBoards : ModalTypes.Remover;\n  function closeRemover() {\n    dispatch(setDeletingBoard(false));\n    dispatch(setDeletingTask(false));\n  }\n  function closeTaskManager() {\n    dispatch(setSubmissionTrigger(true));\n  }\n  function closeTaskEditor() {\n    dispatch(setTaskEditing(false));\n    dispatch(setExistingTask(false));\n  }\n  function closeBoardEditor() {\n    dispatch(setBoardEditing(false));\n    dispatch(setIsExistingBoard(false));\n  }\n  function closeXsBoards() {\n    dispatch(setXsBoardsOpen(false));\n  }\n  const getOnClose = type => ({\n    [ModalTypes.Remover]: closeRemover,\n    [ModalTypes.TaskManager]: closeTaskManager,\n    [ModalTypes.TaskEditor]: closeTaskEditor,\n    [ModalTypes.BoardEditor]: closeBoardEditor,\n    [ModalTypes.XsBoards]: closeXsBoards\n  })[type];\n  return {\n    type,\n    open,\n    getOnClose\n  };\n};\n_s(useAppModal, \"xpZLV8QfUjGyYXYCJ+I7TSqZ2t4=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});","map":{"version":3,"names":["useAppDispatch","useAppSelector","setDeletingBoard","setDeletingTask","setSubmissionTrigger","setTaskEditing","setExistingTask","setBoardEditing","setIsExistingBoard","setXsBoardsOpen","ModalTypes","useAppModal","taskManaging","taskEditing","boardEditing","deletingBoard","deletingTask","xsBoardsOpen","state","modals","open","dispatch","type","Remover","TaskManager","TaskEditor","BoardEditor","XsBoards","closeRemover","closeTaskManager","closeTaskEditor","closeBoardEditor","closeXsBoards","getOnClose"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/useAppModal.ts"],"sourcesContent":["import { useAppDispatch, useAppSelector } from '../../hooks';\nimport {\n   setDeletingBoard,\n   setDeletingTask,\n   setSubmissionTrigger,\n   setTaskEditing,\n   setExistingTask,\n   setBoardEditing,\n   setIsExistingBoard,\n   setXsBoardsOpen,\n} from '../../../../main/slices';\n\nexport enum ModalTypes {\n   TaskManager,\n   TaskEditor,\n   BoardEditor,\n   Remover,\n   XsBoards,\n}\n\nexport const useAppModal = () => {\n   const {\n      taskManaging,\n      taskEditing,\n      boardEditing,\n      deletingBoard,\n      deletingTask,\n      xsBoardsOpen,\n   } = useAppSelector((state) => state.modals);\n   const open =\n      taskManaging ||\n      taskEditing ||\n      boardEditing ||\n      deletingBoard ||\n      deletingTask ||\n      xsBoardsOpen;\n\n   const dispatch = useAppDispatch();\n\n   const type = deletingBoard\n      ? ModalTypes.Remover\n      : taskManaging\n      ? ModalTypes.TaskManager\n      : taskEditing\n      ? ModalTypes.TaskEditor\n      : boardEditing\n      ? ModalTypes.BoardEditor\n      : xsBoardsOpen\n      ? ModalTypes.XsBoards\n      : ModalTypes.Remover;\n\n   function closeRemover() {\n      dispatch(setDeletingBoard(false));\n      dispatch(setDeletingTask(false));\n   }\n\n   function closeTaskManager() {\n      dispatch(setSubmissionTrigger(true));\n   }\n\n   function closeTaskEditor() {\n      dispatch(setTaskEditing(false));\n      dispatch(setExistingTask(false));\n   }\n\n   function closeBoardEditor() {\n      dispatch(setBoardEditing(false));\n      dispatch(setIsExistingBoard(false));\n   }\n\n   function closeXsBoards() {\n      dispatch(setXsBoardsOpen(false));\n   }\n\n   const getOnClose = (type: ModalTypes) =>\n      ({\n         [ModalTypes.Remover]: closeRemover,\n         [ModalTypes.TaskManager]: closeTaskManager,\n         [ModalTypes.TaskEditor]: closeTaskEditor,\n         [ModalTypes.BoardEditor]: closeBoardEditor,\n         [ModalTypes.XsBoards]: closeXsBoards,\n      }[type]);\n\n   return { type, open, getOnClose };\n};\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAC5D,SACGC,gBAAgB,EAChBC,eAAe,EACfC,oBAAoB,EACpBC,cAAc,EACdC,eAAe,EACfC,eAAe,EACfC,kBAAkB,EAClBC,eAAe,QACX,yBAAyB;AAEhC,WAAYC,UAAU;AAMrB,WANWA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU;AAQtB,OAAO,MAAMC,WAAW,GAAG,MAAM;EAAA;EAC9B,MAAM;IACHC,YAAY;IACZC,WAAW;IACXC,YAAY;IACZC,aAAa;IACbC,YAAY;IACZC;EACH,CAAC,GAAGhB,cAAc,CAAEiB,KAAK,IAAKA,KAAK,CAACC,MAAM,CAAC;EAC3C,MAAMC,IAAI,GACPR,YAAY,IACZC,WAAW,IACXC,YAAY,IACZC,aAAa,IACbC,YAAY,IACZC,YAAY;EAEf,MAAMI,QAAQ,GAAGrB,cAAc,EAAE;EAEjC,MAAMsB,IAAI,GAAGP,aAAa,GACrBL,UAAU,CAACa,OAAO,GAClBX,YAAY,GACZF,UAAU,CAACc,WAAW,GACtBX,WAAW,GACXH,UAAU,CAACe,UAAU,GACrBX,YAAY,GACZJ,UAAU,CAACgB,WAAW,GACtBT,YAAY,GACZP,UAAU,CAACiB,QAAQ,GACnBjB,UAAU,CAACa,OAAO;EAEvB,SAASK,YAAY,GAAG;IACrBP,QAAQ,CAACnB,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACjCmB,QAAQ,CAAClB,eAAe,CAAC,KAAK,CAAC,CAAC;EACnC;EAEA,SAAS0B,gBAAgB,GAAG;IACzBR,QAAQ,CAACjB,oBAAoB,CAAC,IAAI,CAAC,CAAC;EACvC;EAEA,SAAS0B,eAAe,GAAG;IACxBT,QAAQ,CAAChB,cAAc,CAAC,KAAK,CAAC,CAAC;IAC/BgB,QAAQ,CAACf,eAAe,CAAC,KAAK,CAAC,CAAC;EACnC;EAEA,SAASyB,gBAAgB,GAAG;IACzBV,QAAQ,CAACd,eAAe,CAAC,KAAK,CAAC,CAAC;IAChCc,QAAQ,CAACb,kBAAkB,CAAC,KAAK,CAAC,CAAC;EACtC;EAEA,SAASwB,aAAa,GAAG;IACtBX,QAAQ,CAACZ,eAAe,CAAC,KAAK,CAAC,CAAC;EACnC;EAEA,MAAMwB,UAAU,GAAIX,IAAgB,IAChC;IACE,CAACZ,UAAU,CAACa,OAAO,GAAGK,YAAY;IAClC,CAAClB,UAAU,CAACc,WAAW,GAAGK,gBAAgB;IAC1C,CAACnB,UAAU,CAACe,UAAU,GAAGK,eAAe;IACxC,CAACpB,UAAU,CAACgB,WAAW,GAAGK,gBAAgB;IAC1C,CAACrB,UAAU,CAACiB,QAAQ,GAAGK;EAC1B,CAAC,EAACV,IAAI,CAAE;EAEX,OAAO;IAAEA,IAAI;IAAEF,IAAI;IAAEa;EAAW,CAAC;AACpC,CAAC;AAAC,GAhEWtB,WAAW;EAAA,QAQjBV,cAAc,EASDD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}