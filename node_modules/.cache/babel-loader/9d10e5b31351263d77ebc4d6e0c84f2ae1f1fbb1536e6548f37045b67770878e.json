{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useFormikValues } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = Yup.object().shape({\n  title: Yup.string().trim().required(\"Can't be empty\"),\n  description: Yup.string().trim(),\n  subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\")).test(\"unique-subtasks\", \"Subtasks must be unique\", function (subtasks) {\n    if (!subtasks || subtasks.length === 0) {\n      // No subtasks, so it's valid\n      return true;\n    }\n    const uniqueSubtasks = new Set(subtasks);\n    return uniqueSubtasks.size === subtasks.length;\n  })\n});\nexport const EditorFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    initialValues,\n    submit\n  } = useFormikValues();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: values => submit(values),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n};\n_s(EditorFormik, \"C7mVacx7UNsmpRzQ6Gt1f1//0WE=\", false, function () {\n  return [useFormikValues];\n});\n_c = EditorFormik;\nvar _c;\n$RefreshReg$(_c, \"EditorFormik\");","map":{"version":3,"names":["Formik","Yup","useFormikValues","schema","object","shape","title","string","trim","required","description","subtasks","array","of","test","length","uniqueSubtasks","Set","size","EditorFormik","children","initialValues","submit","values"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useFormikValues, Values } from '.';\n\ntype FormikValues = FormikProps<Values>;\n\ntype Props = {\n   children: (props: FormikValues) => React.ReactNode;\n};\n\nconst schema = Yup.object().shape({\n   title: Yup.string().trim().required(\"Can't be empty\"),\n   description: Yup.string().trim(),\n   subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\"))\n   .test(\"unique-subtasks\", \"Subtasks must be unique\", function (subtasks) {\n      if (!subtasks || subtasks.length === 0) {\n        // No subtasks, so it's valid\n        return true;\n      }\n      const uniqueSubtasks = new Set(subtasks);\n      return uniqueSubtasks.size === subtasks.length;\n    }),\n});\n\nexport const EditorFormik: React.FC<Props> = ({ children }) => {\n   const { initialValues, submit } = useFormikValues();\n\n   return (\n      <Formik\n         initialValues={initialValues}\n         validationSchema={schema}\n         onSubmit={(values) => submit(values)}\n      >\n         {children}\n      </Formik>\n   );\n};\n"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,eAAe,QAAgB,GAAG;AAAC;AAQ5C,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EAC/BC,KAAK,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EACrDC,WAAW,EAAET,GAAG,CAACM,MAAM,EAAE,CAACC,IAAI,EAAE;EAChCG,QAAQ,EAAEV,GAAG,CAACW,KAAK,EAAE,CAACC,EAAE,CAACZ,GAAG,CAACM,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CACvEK,IAAI,CAAC,iBAAiB,EAAE,yBAAyB,EAAE,UAAUH,QAAQ,EAAE;IACrE,IAAI,CAACA,QAAQ,IAAIA,QAAQ,CAACI,MAAM,KAAK,CAAC,EAAE;MACtC;MACA,OAAO,IAAI;IACb;IACA,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAACN,QAAQ,CAAC;IACxC,OAAOK,cAAc,CAACE,IAAI,KAAKP,QAAQ,CAACI,MAAM;EAChD,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAMI,YAA6B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGpB,eAAe,EAAE;EAEnD,oBACG,QAAC,MAAM;IACJ,aAAa,EAAEmB,aAAc;IAC7B,gBAAgB,EAAElB,MAAO;IACzB,QAAQ,EAAGoB,MAAM,IAAKD,MAAM,CAACC,MAAM,CAAE;IAAA,UAEpCH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GAZWD,YAA6B;EAAA,QACLjB,eAAe;AAAA;AAAA,KADvCiB,YAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}