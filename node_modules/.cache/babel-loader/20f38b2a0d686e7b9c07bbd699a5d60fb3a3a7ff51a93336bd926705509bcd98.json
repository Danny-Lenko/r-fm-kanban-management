{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditBoardModal/BoardFormik/BoardFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useBoardFormik } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const schemaBoard = Yup.object().shape({\n  name: Yup.string().trim().required(\"Can't be empty\"),\n  columns: Yup.array().of(Yup.string().trim().required(\"Can't be empty\"))\n});\nexport const BoardFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    initialValues,\n    submit\n  } = useBoardFormik();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: schemaBoard,\n    onSubmit: values => submit(values),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this);\n};\n_s(BoardFormik, \"lcRmj1KKjhiCWP7jZDcJTXnVcgg=\", false, function () {\n  return [useBoardFormik];\n});\n_c = BoardFormik;\nvar _c;\n$RefreshReg$(_c, \"BoardFormik\");","map":{"version":3,"names":["Formik","Yup","useBoardFormik","schemaBoard","object","shape","name","string","trim","required","columns","array","of","BoardFormik","children","initialValues","submit","values"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditBoardModal/BoardFormik/BoardFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useBoardFormik, BoardValues } from '.';\n\nexport const schemaBoard = Yup.object().shape({\n   name: Yup.string().trim().required(\"Can't be empty\"),\n   columns: Yup.array().of(Yup.string().trim().required(\"Can't be empty\")),\n});\n\ntype FormikValues = FormikProps<BoardValues>;\n\ntype Props = {\n   children: (props: FormikValues) => React.ReactNode;\n};\n\nexport const BoardFormik: React.FC<Props> = ({ children }) => {\n   const { initialValues, submit } = useBoardFormik();\n\n   return (\n      <Formik\n         initialValues={initialValues}\n         validationSchema={schemaBoard}\n         onSubmit={(values) => submit(values)}\n      >\n         {children}\n      </Formik>\n   );\n};\n"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,cAAc,QAAqB,GAAG;AAAC;AAEhD,OAAO,MAAMC,WAAW,GAAGF,GAAG,CAACG,MAAM,EAAE,CAACC,KAAK,CAAC;EAC3CC,IAAI,EAAEL,GAAG,CAACM,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EACpDC,OAAO,EAAET,GAAG,CAACU,KAAK,EAAE,CAACC,EAAE,CAACX,GAAG,CAACM,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;AACzE,CAAC,CAAC;AAQF,OAAO,MAAMI,WAA4B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACtD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGd,cAAc,EAAE;EAElD,oBACG,QAAC,MAAM;IACJ,aAAa,EAAEa,aAAc;IAC7B,gBAAgB,EAAEZ,WAAY;IAC9B,QAAQ,EAAGc,MAAM,IAAKD,MAAM,CAACC,MAAM,CAAE;IAAA,UAEpCH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GAZWD,WAA4B;EAAA,QACJX,cAAc;AAAA;AAAA,KADtCW,WAA4B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}