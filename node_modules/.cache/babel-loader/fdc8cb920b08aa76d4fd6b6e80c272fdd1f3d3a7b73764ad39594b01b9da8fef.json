{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFormik } from 'formik';\nimport { manageActiveTask, manageColumnsChange, assignActiveBoard } from '../../../../../../main/slices';\nimport { countCompletedSubtasks } from '../../../../../utilities/utils';\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\nexport const useFormikValues = () => {\n  _s();\n  const {\n    managedTask,\n    activeColId,\n    activeBoardId,\n    activeBoard\n  } = useAppSelector(state => state.data);\n  const columns = activeBoard.columns;\n  const activeCol = columns.find(col => col.id === activeColId);\n  const dispatch = useAppDispatch();\n  const formik = useFormik({\n    initialValues: {\n      checked: managedTask.subtasks.filter(sub => sub.isCompleted).map(sub => sub.title),\n      status: managedTask.status\n    },\n    validationSchema: null,\n    onSubmit: values => {\n      const editedTask = {\n        ...managedSubs,\n        completedSubtasks: countCompletedSubtasks(managedSubs)\n      };\n      dispatch(manageActiveTask(editedTask));\n      console.log(values);\n\n      // task status changing logic\n      const taskIsAlien = editedTask.status !== (activeCol === null || activeCol === void 0 ? void 0 : activeCol.name);\n      let editedColumns = [...columns];\n      if (taskIsAlien) {\n        editedColumns = columns.map(col => col.id === activeColId ? {\n          ...col,\n          tasks: col.tasks.filter(task => task.id !== editedTask.id).map((task, i) => ({\n            ...task,\n            id: i\n          }))\n        } : col.name === editedTask.status ? {\n          ...col,\n          tasks: [editedTask, ...col.tasks].map((task, i) => ({\n            ...task,\n            id: i\n          }))\n        } : col);\n        dispatch(manageColumnsChange(editedColumns));\n      }\n      // changes the state responsible for render\n      dispatch(assignActiveBoard(activeBoardId));\n    }\n  });\n  return {\n    formik,\n    columns,\n    managedTask\n  };\n};\n_s(useFormikValues, \"42RPjHuWVSLaoQO1eXYhD+I6uC4=\", false, function () {\n  return [useAppSelector, useAppDispatch, useFormik];\n});","map":{"version":3,"names":["useFormik","manageActiveTask","manageColumnsChange","assignActiveBoard","countCompletedSubtasks","useAppSelector","useAppDispatch","useFormikValues","managedTask","activeColId","activeBoardId","activeBoard","state","data","columns","activeCol","find","col","id","dispatch","formik","initialValues","checked","subtasks","filter","sub","isCompleted","map","title","status","validationSchema","onSubmit","values","editedTask","managedSubs","completedSubtasks","console","log","taskIsAlien","name","editedColumns","tasks","task","i"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/ManageTaskModal/formik/useFormikValues.ts"],"sourcesContent":["import { useFormik, FormikValues } from 'formik';\n\nimport {\n   manageActiveTask,\n   manageColumnsChange,\n   assignActiveBoard,\n} from '../../../../../../main/slices';\nimport { countCompletedSubtasks } from '../../../../../utilities/utils';\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\n\nexport const useFormikValues = () => {\n   const { managedTask, activeColId, activeBoardId, activeBoard } =\n      useAppSelector((state) => state.data);\n\n   const columns = activeBoard.columns;\n   const activeCol = columns.find((col) => col.id === activeColId);\n\n   const dispatch = useAppDispatch();\n\n   const formik = useFormik<FormikValues>({\n      initialValues: {\n         checked: managedTask.subtasks\n            .filter((sub) => sub.isCompleted)\n            .map((sub) => sub.title),\n         status: managedTask.status,\n      },\n      validationSchema: null,\n\n      onSubmit: (values: FormikValues) => {\n         const editedTask = {\n            ...managedSubs,\n            completedSubtasks: countCompletedSubtasks(managedSubs),\n         };\n         \n         dispatch(manageActiveTask(editedTask));\n\n         console.log(values);\n\n         // task status changing logic\n         const taskIsAlien = editedTask.status !== activeCol?.name;\n         let editedColumns = [...columns];\n         if (taskIsAlien) {\n            editedColumns = columns.map((col) =>\n               col.id === activeColId\n                  ? {\n                       ...col,\n                       tasks: col.tasks\n                          .filter((task) => task.id !== editedTask.id)\n                          .map((task, i) => ({ ...task, id: i })),\n                    }\n                  : col.name === editedTask.status\n                  ? {\n                       ...col,\n                       tasks: [editedTask, ...col.tasks].map((task, i) => ({\n                          ...task,\n                          id: i,\n                       })),\n                    }\n                  : col,\n            );\n            dispatch(manageColumnsChange(editedColumns));\n         }\n         // changes the state responsible for render\n         dispatch(assignActiveBoard(activeBoardId));\n      },\n   });\n\n   return { formik, columns, managedTask };\n};\n"],"mappings":";AAAA,SAASA,SAAS,QAAsB,QAAQ;AAEhD,SACGC,gBAAgB,EAChBC,mBAAmB,EACnBC,iBAAiB,QACb,+BAA+B;AACtC,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE,SAASC,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAElE,OAAO,MAAMC,eAAe,GAAG,MAAM;EAAA;EAClC,MAAM;IAAEC,WAAW;IAAEC,WAAW;IAAEC,aAAa;IAAEC;EAAY,CAAC,GAC3DN,cAAc,CAAEO,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EAExC,MAAMC,OAAO,GAAGH,WAAW,CAACG,OAAO;EACnC,MAAMC,SAAS,GAAGD,OAAO,CAACE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKT,WAAW,CAAC;EAE/D,MAAMU,QAAQ,GAAGb,cAAc,EAAE;EAEjC,MAAMc,MAAM,GAAGpB,SAAS,CAAe;IACpCqB,aAAa,EAAE;MACZC,OAAO,EAAEd,WAAW,CAACe,QAAQ,CACzBC,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,CAAC,CAChCC,GAAG,CAAEF,GAAG,IAAKA,GAAG,CAACG,KAAK,CAAC;MAC3BC,MAAM,EAAErB,WAAW,CAACqB;IACvB,CAAC;IACDC,gBAAgB,EAAE,IAAI;IAEtBC,QAAQ,EAAGC,MAAoB,IAAK;MACjC,MAAMC,UAAU,GAAG;QAChB,GAAGC,WAAW;QACdC,iBAAiB,EAAE/B,sBAAsB,CAAC8B,WAAW;MACxD,CAAC;MAEDf,QAAQ,CAAClB,gBAAgB,CAACgC,UAAU,CAAC,CAAC;MAEtCG,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;;MAEnB;MACA,MAAMM,WAAW,GAAGL,UAAU,CAACJ,MAAM,MAAKd,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEwB,IAAI;MACzD,IAAIC,aAAa,GAAG,CAAC,GAAG1B,OAAO,CAAC;MAChC,IAAIwB,WAAW,EAAE;QACdE,aAAa,GAAG1B,OAAO,CAACa,GAAG,CAAEV,GAAG,IAC7BA,GAAG,CAACC,EAAE,KAAKT,WAAW,GACjB;UACG,GAAGQ,GAAG;UACNwB,KAAK,EAAExB,GAAG,CAACwB,KAAK,CACZjB,MAAM,CAAEkB,IAAI,IAAKA,IAAI,CAACxB,EAAE,KAAKe,UAAU,CAACf,EAAE,CAAC,CAC3CS,GAAG,CAAC,CAACe,IAAI,EAAEC,CAAC,MAAM;YAAE,GAAGD,IAAI;YAAExB,EAAE,EAAEyB;UAAE,CAAC,CAAC;QAC5C,CAAC,GACD1B,GAAG,CAACsB,IAAI,KAAKN,UAAU,CAACJ,MAAM,GAC9B;UACG,GAAGZ,GAAG;UACNwB,KAAK,EAAE,CAACR,UAAU,EAAE,GAAGhB,GAAG,CAACwB,KAAK,CAAC,CAACd,GAAG,CAAC,CAACe,IAAI,EAAEC,CAAC,MAAM;YACjD,GAAGD,IAAI;YACPxB,EAAE,EAAEyB;UACP,CAAC,CAAC;QACL,CAAC,GACD1B,GAAG,CACV;QACDE,QAAQ,CAACjB,mBAAmB,CAACsC,aAAa,CAAC,CAAC;MAC/C;MACA;MACArB,QAAQ,CAAChB,iBAAiB,CAACO,aAAa,CAAC,CAAC;IAC7C;EACH,CAAC,CAAC;EAEF,OAAO;IAAEU,MAAM;IAAEN,OAAO;IAAEN;EAAY,CAAC;AAC1C,CAAC;AAAC,GA1DWD,eAAe;EAAA,QAEtBF,cAAc,EAKAC,cAAc,EAEhBN,SAAS;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}