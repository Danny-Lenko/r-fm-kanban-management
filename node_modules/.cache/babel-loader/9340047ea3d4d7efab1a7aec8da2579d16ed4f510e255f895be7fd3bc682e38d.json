{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useFormikValues } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validateUniqueSubtasks = values => {\n  if (!values) {\n    return true;\n  }\n  const seen = new Set();\n\n  // for (let i = 0; i < value.length; i++) {\n  //    const subtask = value[i];\n\n  //    if (seen.has(subtask)) {\n  //       throw new Yup.ValidationError(\n  //          'Subtask must be unique',\n  //          value[i],\n  //          `subtasks[${i}]`,\n  //       );\n  //    } else {\n  //       seen.add(subtask);\n  //    }\n  // }\n\n  for (const value of values) {\n    if (seen.has(value)) {\n      throw new Yup.ValidationError('Subtask must be unique', value) // `subtasks[${i}]`,\n      ;\n    } else {\n      seen.add(value);\n    }\n  }\n  return true;\n};\nconst schema = Yup.object().shape({\n  title: Yup.string().trim().required(\"Can't be empty\"),\n  description: Yup.string().trim(),\n  subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\")).test('unique-subtasks', 'Subtasks must be unique', validateUniqueSubtasks)\n});\nexport const EditorFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    initialValues,\n    submit\n  } = useFormikValues();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: values => submit(values),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n};\n_s(EditorFormik, \"C7mVacx7UNsmpRzQ6Gt1f1//0WE=\", false, function () {\n  return [useFormikValues];\n});\n_c = EditorFormik;\nvar _c;\n$RefreshReg$(_c, \"EditorFormik\");","map":{"version":3,"names":["Formik","Yup","useFormikValues","validateUniqueSubtasks","values","seen","Set","value","has","ValidationError","add","schema","object","shape","title","string","trim","required","description","subtasks","array","of","test","EditorFormik","children","initialValues","submit"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useFormikValues, Values } from '.';\n\ntype FormikValues = FormikProps<Values>;\n\ntype Props = {\n   children: (props: FormikValues) => React.ReactNode;\n};\n\nconst validateUniqueSubtasks = (values: (string | undefined)[] | undefined) => {\n   if (!values) {\n      return true;\n   }\n   const seen = new Set();\n\n   // for (let i = 0; i < value.length; i++) {\n   //    const subtask = value[i];\n\n   //    if (seen.has(subtask)) {\n   //       throw new Yup.ValidationError(\n   //          'Subtask must be unique',\n   //          value[i],\n   //          `subtasks[${i}]`,\n   //       );\n   //    } else {\n   //       seen.add(subtask);\n   //    }\n   // }\n\n   for (const value of values) {\n      if (seen.has(value)) {\n         throw new Yup.ValidationError(\n            'Subtask must be unique',\n            value,\n            // `subtasks[${i}]`,\n         );\n      } else {\n         seen.add(value);\n      }\n   }\n\n   return true;\n};\n\nconst schema = Yup.object().shape({\n   title: Yup.string().trim().required(\"Can't be empty\"),\n   description: Yup.string().trim(),\n   subtasks: Yup.array()\n      .of(Yup.string().trim().required(\"Can't be empty\"))\n      .test(\n         'unique-subtasks',\n         'Subtasks must be unique',\n         validateUniqueSubtasks,\n      ),\n});\n\nexport const EditorFormik: React.FC<Props> = ({ children }) => {\n   const { initialValues, submit } = useFormikValues();\n\n   return (\n      <Formik\n         initialValues={initialValues}\n         validationSchema={schema}\n         onSubmit={(values) => submit(values)}\n      >\n         {children}\n      </Formik>\n   );\n};\n"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,eAAe,QAAgB,GAAG;AAAC;AAQ5C,MAAMC,sBAAsB,GAAIC,MAA0C,IAAK;EAC5E,IAAI,CAACA,MAAM,EAAE;IACV,OAAO,IAAI;EACd;EACA,MAAMC,IAAI,GAAG,IAAIC,GAAG,EAAE;;EAEtB;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;IACzB,IAAIC,IAAI,CAACG,GAAG,CAACD,KAAK,CAAC,EAAE;MAClB,MAAM,IAAIN,GAAG,CAACQ,eAAe,CAC1B,wBAAwB,EACxBF,KAAK,CAEP,CADE;MAAA;IAEN,CAAC,MAAM;MACJF,IAAI,CAACK,GAAG,CAACH,KAAK,CAAC;IAClB;EACH;EAEA,OAAO,IAAI;AACd,CAAC;AAED,MAAMI,MAAM,GAAGV,GAAG,CAACW,MAAM,EAAE,CAACC,KAAK,CAAC;EAC/BC,KAAK,EAAEb,GAAG,CAACc,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EACrDC,WAAW,EAAEjB,GAAG,CAACc,MAAM,EAAE,CAACC,IAAI,EAAE;EAChCG,QAAQ,EAAElB,GAAG,CAACmB,KAAK,EAAE,CACjBC,EAAE,CAACpB,GAAG,CAACc,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAClDK,IAAI,CACF,iBAAiB,EACjB,yBAAyB,EACzBnB,sBAAsB;AAE/B,CAAC,CAAC;AAEF,OAAO,MAAMoB,YAA6B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGxB,eAAe,EAAE;EAEnD,oBACG,QAAC,MAAM;IACJ,aAAa,EAAEuB,aAAc;IAC7B,gBAAgB,EAAEd,MAAO;IACzB,QAAQ,EAAGP,MAAM,IAAKsB,MAAM,CAACtB,MAAM,CAAE;IAAA,UAEpCoB;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GAZWD,YAA6B;EAAA,QACLrB,eAAe;AAAA;AAAA,KADvCqB,YAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}