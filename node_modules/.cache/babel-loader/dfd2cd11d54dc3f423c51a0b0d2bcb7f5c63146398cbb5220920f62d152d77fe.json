{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useFormikValues } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nYup.addMethod(Yup.array, 'unique', function (field, message) {\n  return this.test('unique', message, function (array) {\n    const uniqueData = Array.from(new Set(array === null || array === void 0 ? void 0 : array.map(row => {\n      var _row$field;\n      return (_row$field = row[field]) === null || _row$field === void 0 ? void 0 : _row$field.toLowerCase();\n    })));\n    const isUnique = (array === null || array === void 0 ? void 0 : array.length) === uniqueData.length;\n    if (isUnique) {\n      return true;\n    }\n    const index = array === null || array === void 0 ? void 0 : array.findIndex((row, i) => {\n      var _row$field2;\n      return ((_row$field2 = row[field]) === null || _row$field2 === void 0 ? void 0 : _row$field2.toLowerCase()) !== uniqueData[i];\n    });\n    if (array[index][field] === '') {\n      return true;\n    }\n    return this.createError({\n      path: `${this.path}.${index}.${field}`,\n      message\n    });\n  });\n});\n\n// Yup.addMethod(Yup.array, 'unique', function (array = [], message) {\n//    return this.test('unique', message, function (value) {\n//       return array.filter((item:any) => item === value).length < 2;\n//    });\n// });\n\n// const schema = Yup.object().shape({\n//    title: Yup.string().trim().required(\"Can't be empty\"),\n//    description: Yup.string().trim(),\n//    subtasks: Yup.array()\n//       .of(Yup.string().trim().required(\"Can't be empty\"))\n//       .uniqueIn('not unique'),\n// });\n\nexport const EditorFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    initialValues,\n    submit\n  } = useFormikValues();\n\n  // Yup.addMethod(\n  //    Yup.array,\n  //    'unique',\n  //    function (message, mapper = (a: string) => a) {\n  //       return this.test('unique', message, function (list) {\n  //          return list?.length === new Set(list?.map(mapper)).size;\n  //       });\n  //    },\n  // );\n\n  const schema = Yup.object().shape({\n    title: Yup.string().trim().required(\"Can't be empty\"),\n    description: Yup.string().trim(),\n    subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\")).unique\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: values => submit(values),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n};\n_s(EditorFormik, \"C7mVacx7UNsmpRzQ6Gt1f1//0WE=\", false, function () {\n  return [useFormikValues];\n});\n_c = EditorFormik;\nvar _c;\n$RefreshReg$(_c, \"EditorFormik\");","map":{"version":3,"names":["Formik","Yup","useFormikValues","addMethod","array","field","message","test","uniqueData","Array","from","Set","map","row","toLowerCase","isUnique","length","index","findIndex","i","createError","path","EditorFormik","children","initialValues","submit","schema","object","shape","title","string","trim","required","description","subtasks","of","unique","values"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useFormikValues, Values } from '.';\n\ntype FormikValues = FormikProps<Values>;\n\ntype Props = {\n   children: (props: FormikValues) => React.ReactNode;\n};\n\ndeclare module 'yup' {\n   interface ArraySchema<T> {\n      unique(message: string, mapper?: (a: T) => any): this;\n   }\n}\n\nYup.addMethod(Yup.array, 'unique', function (field, message) {\n   return this.test('unique', message, function (array) {\n      const uniqueData = Array.from(\n         new Set(array?.map((row) => row[field]?.toLowerCase())),\n      );\n      const isUnique = array?.length === uniqueData.length;\n      if (isUnique) {\n         return true;\n      }\n      const index = array?.findIndex(\n         (row, i) => row[field]?.toLowerCase() !== uniqueData[i],\n      );\n      if (array![index!][field] === '') {\n         return true;\n      }\n      return this.createError({\n         path: `${this.path}.${index}.${field}`,\n         message,\n      });\n   });\n});\n\n// Yup.addMethod(Yup.array, 'unique', function (array = [], message) {\n//    return this.test('unique', message, function (value) {\n//       return array.filter((item:any) => item === value).length < 2;\n//    });\n// });\n\n// const schema = Yup.object().shape({\n//    title: Yup.string().trim().required(\"Can't be empty\"),\n//    description: Yup.string().trim(),\n//    subtasks: Yup.array()\n//       .of(Yup.string().trim().required(\"Can't be empty\"))\n//       .uniqueIn('not unique'),\n// });\n\nexport const EditorFormik: React.FC<Props> = ({ children }) => {\n   const { initialValues, submit } = useFormikValues();\n\n   // Yup.addMethod(\n   //    Yup.array,\n   //    'unique',\n   //    function (message, mapper = (a: string) => a) {\n   //       return this.test('unique', message, function (list) {\n   //          return list?.length === new Set(list?.map(mapper)).size;\n   //       });\n   //    },\n   // );\n\n   const schema = Yup.object().shape({\n      title: Yup.string().trim().required(\"Can't be empty\"),\n      description: Yup.string().trim(),\n      subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\"))\n         .unique,\n   });\n\n   return (\n      <Formik\n         initialValues={initialValues}\n         validationSchema={schema}\n         onSubmit={(values) => submit(values)}\n      >\n         {children}\n      </Formik>\n   );\n};\n"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,eAAe,QAAgB,GAAG;AAAC;AAc5CD,GAAG,CAACE,SAAS,CAACF,GAAG,CAACG,KAAK,EAAE,QAAQ,EAAE,UAAUC,KAAK,EAAEC,OAAO,EAAE;EAC1D,OAAO,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAED,OAAO,EAAE,UAAUF,KAAK,EAAE;IAClD,MAAMI,UAAU,GAAGC,KAAK,CAACC,IAAI,CAC1B,IAAIC,GAAG,CAACP,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEQ,GAAG,CAAEC,GAAG;MAAA;MAAA,qBAAKA,GAAG,CAACR,KAAK,CAAC,+CAAV,WAAYS,WAAW,EAAE;IAAA,EAAC,CAAC,CACzD;IACD,MAAMC,QAAQ,GAAG,CAAAX,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEY,MAAM,MAAKR,UAAU,CAACQ,MAAM;IACpD,IAAID,QAAQ,EAAE;MACX,OAAO,IAAI;IACd;IACA,MAAME,KAAK,GAAGb,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEc,SAAS,CAC3B,CAACL,GAAG,EAAEM,CAAC;MAAA;MAAA,OAAK,gBAAAN,GAAG,CAACR,KAAK,CAAC,gDAAV,YAAYS,WAAW,EAAE,MAAKN,UAAU,CAACW,CAAC,CAAC;IAAA,EACzD;IACD,IAAIf,KAAK,CAAEa,KAAK,CAAE,CAACZ,KAAK,CAAC,KAAK,EAAE,EAAE;MAC/B,OAAO,IAAI;IACd;IACA,OAAO,IAAI,CAACe,WAAW,CAAC;MACrBC,IAAI,EAAG,GAAE,IAAI,CAACA,IAAK,IAAGJ,KAAM,IAAGZ,KAAM,EAAC;MACtCC;IACH,CAAC,CAAC;EACL,CAAC,CAAC;AACL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMgB,YAA6B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGvB,eAAe,EAAE;;EAEnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMwB,MAAM,GAAGzB,GAAG,CAAC0B,MAAM,EAAE,CAACC,KAAK,CAAC;IAC/BC,KAAK,EAAE5B,GAAG,CAAC6B,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;IACrDC,WAAW,EAAEhC,GAAG,CAAC6B,MAAM,EAAE,CAACC,IAAI,EAAE;IAChCG,QAAQ,EAAEjC,GAAG,CAACG,KAAK,EAAE,CAAC+B,EAAE,CAAClC,GAAG,CAAC6B,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CACpEI;EACP,CAAC,CAAC;EAEF,oBACG,QAAC,MAAM;IACJ,aAAa,EAAEZ,aAAc;IAC7B,gBAAgB,EAAEE,MAAO;IACzB,QAAQ,EAAGW,MAAM,IAAKZ,MAAM,CAACY,MAAM,CAAE;IAAA,UAEpCd;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GA7BWD,YAA6B;EAAA,QACLpB,eAAe;AAAA;AAAA,KADvCoB,YAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}