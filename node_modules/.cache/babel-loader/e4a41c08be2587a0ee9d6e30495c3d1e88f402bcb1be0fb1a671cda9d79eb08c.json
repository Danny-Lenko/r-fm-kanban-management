{"ast":null,"code":"import { setTaskEditing, setExistingTask, setBoards, assignActiveBoard } from '../../../../../../main/slices';\nimport { countCompletedSubtasks } from '../../../../../utilities/utils';\n// createTask\nexport const createTask = _ref => {\n  let {\n    values,\n    columns,\n    boards,\n    activeBoard,\n    activeBoardId,\n    dispatch,\n    activeTask,\n    activeColId\n  } = _ref;\n  const activeCol = columns.find(col => col.name === values.status);\n  const newTask = {\n    ...values,\n    subtasks: values.subtasks.map(sub => ({\n      title: sub,\n      isCompleted: false\n    })),\n    completedSubtasks: 0,\n    id: activeCol.tasks.length\n  };\n  const boardsUpdated = boards.map(board => board.id !== activeBoard.id ? board : {\n    ...board,\n    columns: board.columns.map(col => col.id !== activeCol.id ? col : {\n      ...col,\n      tasks: [newTask, ...col.tasks].map((task, i) => ({\n        ...task,\n        id: i\n      }))\n    })\n  });\n  dispatch(setBoards(boardsUpdated));\n  dispatch(assignActiveBoard(activeBoardId));\n  dispatch(setTaskEditing(false));\n};\n\n// saveChanges\nexport const saveChanges = _ref2 => {\n  let {\n    values,\n    columns,\n    boards,\n    activeBoard,\n    activeBoardId,\n    dispatch,\n    activeTask,\n    activeColId\n  } = _ref2;\n  let taskUpdated = {\n    ...activeTask,\n    ...values,\n    subtasks: values.subtasks.map((sub, i) => activeTask.subtasks[i] && sub === activeTask.subtasks[i].title ? activeTask.subtasks[i] : {\n      title: sub,\n      isCompleted: false\n    })\n  };\n  taskUpdated = {\n    ...taskUpdated,\n    completedSubtasks: countCompletedSubtasks(taskUpdated)\n  };\n  const pastCol = columns.find(col => col.id === activeColId);\n  const futureCol = columns.find(col => col.name === values.status);\n  const statusChanged = taskUpdated.status !== pastCol.name;\n  const boardsUpdated = boards.map(board => board.id !== activeBoard.id ? board : {\n    ...board,\n    columns: board.columns.map(col => col.id === pastCol.id ?\n    // changing past column depending on if the status changed or not\n    {\n      ...col,\n      tasks: statusChanged ? col.tasks.filter(task => task.id !== taskUpdated.id).map((task, i) => ({\n        ...task,\n        id: i\n      })) : col.tasks.map(task => task.id !== taskUpdated.id ? task : taskUpdated)\n    } :\n    // changing future column if the status changed\n    col.id === futureCol.id ? {\n      ...col,\n      tasks: statusChanged ? [taskUpdated, ...col.tasks].map((task, i) => ({\n        ...task,\n        id: i\n      })) : col.tasks\n    } : col)\n  });\n  dispatch(setBoards(boardsUpdated));\n  dispatch(assignActiveBoard(activeBoardId));\n  dispatch(setTaskEditing(false));\n  dispatch(setExistingTask(false));\n};","map":{"version":3,"names":["setTaskEditing","setExistingTask","setBoards","assignActiveBoard","countCompletedSubtasks","createTask","values","columns","boards","activeBoard","activeBoardId","dispatch","activeTask","activeColId","activeCol","find","col","name","status","newTask","subtasks","map","sub","title","isCompleted","completedSubtasks","id","tasks","length","boardsUpdated","board","task","i","saveChanges","taskUpdated","pastCol","futureCol","statusChanged","filter"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/utils.ts"],"sourcesContent":["import {\n   setTaskEditing,\n   setExistingTask,\n   setBoards,\n   assignActiveBoard,\n} from '../../../../../../main/slices';\nimport { countCompletedSubtasks } from '../../../../../utilities/utils';\nimport { ISumbissionParams } from '../../../../../interfaces';\n\nexport type Values = {\n   title: string;\n   description: string;\n   subtasks: string[];\n   status: string;\n};\n\ninterface Props extends ISumbissionParams {\n   values: Values;\n}\n\n// createTask\nexport const createTask = ({\n   values,\n   columns,\n   boards,\n   activeBoard,\n   activeBoardId,\n   dispatch,\n   activeTask,\n   activeColId,\n}: Props) => {\n   const activeCol = columns.find((col) => col.name === values.status);\n   const newTask = {\n      ...values,\n      subtasks: values.subtasks.map((sub) => ({\n         title: sub,\n         isCompleted: false,\n      })),\n      completedSubtasks: 0,\n      id: activeCol!.tasks.length,\n   };\n\n   const boardsUpdated = boards.map((board) =>\n      board.id !== activeBoard.id\n         ? board\n         : {\n              ...board,\n              columns: board.columns.map((col) =>\n                 col.id !== activeCol!.id\n                    ? col\n                    : {\n                         ...col,\n                         tasks: [newTask, ...col.tasks].map((task, i) => ({\n                            ...task,\n                            id: i,\n                         })),\n                      },\n              ),\n           },\n   );\n\n   dispatch(setBoards(boardsUpdated));\n   dispatch(assignActiveBoard(activeBoardId));\n   dispatch(setTaskEditing(false));\n};\n\n// saveChanges\nexport const saveChanges = ({\n   values,\n   columns,\n   boards,\n   activeBoard,\n   activeBoardId,\n   dispatch,\n   activeTask,\n   activeColId,\n}: Props) => {\n   let taskUpdated = {\n      ...activeTask,\n      ...values,\n      subtasks: values.subtasks.map((sub, i) =>\n         activeTask.subtasks[i] && sub === activeTask.subtasks[i].title\n            ? activeTask.subtasks[i]\n            : { title: sub, isCompleted: false },\n      ),\n   };\n   taskUpdated = {\n      ...taskUpdated,\n      completedSubtasks: countCompletedSubtasks(taskUpdated),\n   };\n   const pastCol = columns.find((col) => col.id === activeColId);\n   const futureCol = columns.find((col) => col.name === values.status);\n   const statusChanged = taskUpdated.status !== pastCol!.name;\n\n   const boardsUpdated = boards.map((board) =>\n      board.id !== activeBoard.id\n         ? board\n         : {\n              ...board,\n              columns: board.columns.map((col) =>\n                 col.id === pastCol!.id\n                    ? // changing past column depending on if the status changed or not\n                      {\n                         ...col,\n                         tasks: statusChanged\n                            ? col.tasks\n                                 .filter((task) => task.id !== taskUpdated.id)\n                                 .map((task, i) => ({\n                                    ...task,\n                                    id: i,\n                                 }))\n                            : col.tasks.map((task) =>\n                                 task.id !== taskUpdated.id\n                                    ? task\n                                    : taskUpdated,\n                              ),\n                      }\n                    : // changing future column if the status changed\n                    col.id === futureCol!.id\n                    ? {\n                         ...col,\n                         tasks: statusChanged\n                            ? [taskUpdated, ...col.tasks].map((task, i) => ({\n                                 ...task,\n                                 id: i,\n                              }))\n                            : col.tasks,\n                      }\n                    : col,\n              ),\n           },\n   );\n\n   dispatch(setBoards(boardsUpdated));\n   dispatch(assignActiveBoard(activeBoardId));\n   dispatch(setTaskEditing(false));\n   dispatch(setExistingTask(false));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}