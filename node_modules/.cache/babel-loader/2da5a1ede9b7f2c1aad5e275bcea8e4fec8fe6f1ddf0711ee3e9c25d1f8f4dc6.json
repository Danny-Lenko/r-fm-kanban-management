{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAppSelector, useAppDispatch } from '../../library/common/hooks';\nimport { setBoards, assignActiveBoard } from '../../main/slices/dataSlice';\nimport { COLUMNCOLORS } from '../../library/common/constants';\nexport const useNewColumn = () => {\n  _s();\n  const {\n    activeBoard,\n    boards\n  } = useAppSelector(state => state.data);\n  const {\n    columns\n  } = activeBoard;\n  const dispatch = useAppDispatch();\n  const addNewColumn = () => {\n    const boardsUpdated = boards.map(board => {\n      const {\n        id,\n        columns\n      } = board;\n      return id !== activeBoard.id ? board : {\n        ...board,\n        columns: [...board.columns, {\n          id: columns.length,\n          name: `NewColumn${columns.length + 1}`,\n          tasks: [],\n          color: COLUMNCOLORS[columns.length] ? COLUMNCOLORS[columns.length] : '#E4EBFA'\n        }]\n      };\n    });\n    dispatch(setBoards(boardsUpdated));\n    dispatch(assignActiveBoard(activeBoard.id));\n  };\n  return {\n    columns,\n    addNewColumn\n  };\n};\n_s(useNewColumn, \"x2D6OpcHs3tMT8lG/83oKmZAqIk=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});","map":{"version":3,"names":["useAppSelector","useAppDispatch","setBoards","assignActiveBoard","COLUMNCOLORS","useNewColumn","activeBoard","boards","state","data","columns","dispatch","addNewColumn","boardsUpdated","map","board","id","length","name","tasks","color"],"sources":["/home/danny/projects/r-fm-kanban-management/src/modules/Board/useNewColumn.ts"],"sourcesContent":["import { useAppSelector, useAppDispatch } from '../../library/common/hooks';\nimport { setBoards, assignActiveBoard } from '../../main/slices/dataSlice';\nimport { COLUMNCOLORS } from '../../library/common/constants';\n\nexport const useNewColumn = () => {\n   const { activeBoard, boards } = useAppSelector((state) => state.data);\n   const { columns } = activeBoard;\n   const dispatch = useAppDispatch();\n\n   const addNewColumn = () => {\n      const boardsUpdated = boards.map((board) => {\n         const { id, columns } = board;\n\n         return id !== activeBoard.id\n            ? board\n            : {\n                 ...board,\n                 columns: [\n                    ...board.columns,\n                    {\n                       id: columns.length,\n                       name: `NewColumn${columns.length + 1}`,\n                       tasks: [],\n                       color: COLUMNCOLORS[columns.length]\n                          ? COLUMNCOLORS[columns.length]\n                          : '#E4EBFA',\n                    },\n                 ],\n              };\n      });\n\n      dispatch(setBoards(boardsUpdated));\n      dispatch(assignActiveBoard(activeBoard.id));\n   };\n\n   return { columns, addNewColumn };\n};\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,cAAc,QAAQ,4BAA4B;AAC3E,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,6BAA6B;AAC1E,SAASC,YAAY,QAAQ,gCAAgC;AAE7D,OAAO,MAAMC,YAAY,GAAG,MAAM;EAAA;EAC/B,MAAM;IAAEC,WAAW;IAAEC;EAAO,CAAC,GAAGP,cAAc,CAAEQ,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACrE,MAAM;IAAEC;EAAQ,CAAC,GAAGJ,WAAW;EAC/B,MAAMK,QAAQ,GAAGV,cAAc,EAAE;EAEjC,MAAMW,YAAY,GAAG,MAAM;IACxB,MAAMC,aAAa,GAAGN,MAAM,CAACO,GAAG,CAAEC,KAAK,IAAK;MACzC,MAAM;QAAEC,EAAE;QAAEN;MAAQ,CAAC,GAAGK,KAAK;MAE7B,OAAOC,EAAE,KAAKV,WAAW,CAACU,EAAE,GACvBD,KAAK,GACL;QACG,GAAGA,KAAK;QACRL,OAAO,EAAE,CACN,GAAGK,KAAK,CAACL,OAAO,EAChB;UACGM,EAAE,EAAEN,OAAO,CAACO,MAAM;UAClBC,IAAI,EAAG,YAAWR,OAAO,CAACO,MAAM,GAAG,CAAE,EAAC;UACtCE,KAAK,EAAE,EAAE;UACTC,KAAK,EAAEhB,YAAY,CAACM,OAAO,CAACO,MAAM,CAAC,GAC9Bb,YAAY,CAACM,OAAO,CAACO,MAAM,CAAC,GAC5B;QACR,CAAC;MAEP,CAAC;IACT,CAAC,CAAC;IAEFN,QAAQ,CAACT,SAAS,CAACW,aAAa,CAAC,CAAC;IAClCF,QAAQ,CAACR,iBAAiB,CAACG,WAAW,CAACU,EAAE,CAAC,CAAC;EAC9C,CAAC;EAED,OAAO;IAAEN,OAAO;IAAEE;EAAa,CAAC;AACnC,CAAC;AAAC,GAhCWP,YAAY;EAAA,QACUL,cAAc,EAE7BC,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}