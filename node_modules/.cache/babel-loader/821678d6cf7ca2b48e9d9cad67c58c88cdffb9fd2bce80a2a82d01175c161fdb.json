{"ast":null,"code":"import { countCompletedSubtasks } from '../../../../utilities/utils';\nimport { setTaskEditing, setExistingTask, setBoards, assignActiveBoard } from '../../../../../../main/slices';\nexport const saveChanges = _ref => {\n  let {\n    values,\n    cols,\n    boards,\n    activeBoard,\n    activeBoardId,\n    dispatch,\n    activeTask,\n    activeColId\n  } = _ref;\n  let taskUpdated = {\n    ...activeTask,\n    ...values,\n    subtasks: values.subtasks.map((sub, i) => activeTask.subtasks[i] && sub === activeTask.subtasks[i].title ? activeTask.subtasks[i] : {\n      title: sub,\n      isCompleted: false\n    })\n  };\n  taskUpdated = {\n    ...taskUpdated,\n    completedSubtasks: countCompletedSubtasks(taskUpdated)\n  };\n  const pastCol = cols.find(col => col.id === activeColId);\n  const futureCol = cols.find(col => col.name === values.status);\n  const statusChanged = taskUpdated.status !== pastCol.name;\n  const boardsUpdated = boards.map(board => board.id !== activeBoard.id ? board : {\n    ...board,\n    columns: board.columns.map(col => col.id === pastCol.id ?\n    // changing past column depending on if the status changed or not\n    {\n      ...col,\n      tasks: statusChanged ? col.tasks.filter(task => task.id !== taskUpdated.id).map((task, i) => ({\n        ...task,\n        id: i\n      })) : col.tasks.map(task => task.id !== taskUpdated.id ? task : taskUpdated)\n    } :\n    // changing future column if the status changed\n    col.id === futureCol.id ? {\n      ...col,\n      tasks: statusChanged ? [taskUpdated, ...col.tasks].map((task, i) => ({\n        ...task,\n        id: i\n      })) : col.tasks\n    } : col)\n  });\n  dispatch(setBoards(boardsUpdated));\n  dispatch(assignActiveBoard(activeBoardId));\n  dispatch(setTaskEditing(false));\n  dispatch(setExistingTask(false));\n};","map":{"version":3,"names":["countCompletedSubtasks","setTaskEditing","setExistingTask","setBoards","assignActiveBoard","saveChanges","values","cols","boards","activeBoard","activeBoardId","dispatch","activeTask","activeColId","taskUpdated","subtasks","map","sub","i","title","isCompleted","completedSubtasks","pastCol","find","col","id","futureCol","name","status","statusChanged","boardsUpdated","board","columns","tasks","filter","task"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/editorSaveChanges.ts"],"sourcesContent":["import { countCompletedSubtasks } from '../../../../utilities/utils';\n\nimport {\n   setTaskEditing,\n   setExistingTask,\n   setBoards,\n   assignActiveBoard,\n} from '../../../../../../main/slices';\n\nexport const saveChanges = ({\n   values,\n   cols,\n   boards,\n   activeBoard,\n   activeBoardId,\n   dispatch,\n   activeTask,\n   activeColId,\n}: any) => {\n   let taskUpdated = {\n      ...activeTask,\n      ...values,\n      subtasks: values.subtasks.map((sub: any, i: number) =>\n         activeTask.subtasks[i] && sub === activeTask.subtasks[i].title\n            ? activeTask.subtasks[i]\n            : { title: sub, isCompleted: false },\n      ),\n   };\n   taskUpdated = {\n      ...taskUpdated,\n      completedSubtasks: countCompletedSubtasks(taskUpdated),\n   };\n   const pastCol = cols.find((col: any) => col.id === activeColId);\n   const futureCol = cols.find((col: any) => col.name === values.status);\n   const statusChanged = taskUpdated.status !== pastCol.name;\n\n   const boardsUpdated = boards.map((board: any) =>\n      board.id !== activeBoard.id\n         ? board\n         : {\n              ...board,\n              columns: board.columns.map((col: any) =>\n                 col.id === pastCol!.id\n                    ? // changing past column depending on if the status changed or not\n                      {\n                         ...col,\n                         tasks: statusChanged\n                            ? col.tasks\n                                 .filter(\n                                    (task: any) => task.id !== taskUpdated.id,\n                                 )\n                                 .map((task: any, i: number) => ({\n                                    ...task,\n                                    id: i,\n                                 }))\n                            : col.tasks.map((task: any) =>\n                                 task.id !== taskUpdated.id\n                                    ? task\n                                    : taskUpdated,\n                              ),\n                      }\n                    : // changing future column if the status changed\n                    col.id === futureCol.id\n                    ? {\n                         ...col,\n                         tasks: statusChanged\n                            ? [taskUpdated, ...col.tasks].map(\n                                 (task: any, i: number) => ({ ...task, id: i }),\n                              )\n                            : col.tasks,\n                      }\n                    : col,\n              ),\n           },\n   );\n\n   dispatch(setBoards(boardsUpdated));\n   dispatch(assignActiveBoard(activeBoardId));\n   dispatch(setTaskEditing(false));\n   dispatch(setExistingTask(false));\n};\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,6BAA6B;AAEpE,SACGC,cAAc,EACdC,eAAe,EACfC,SAAS,EACTC,iBAAiB,QACb,+BAA+B;AAEtC,OAAO,MAAMC,WAAW,GAAG,QAShB;EAAA,IATiB;IACzBC,MAAM;IACNC,IAAI;IACJC,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC,QAAQ;IACRC,UAAU;IACVC;EACE,CAAC;EACH,IAAIC,WAAW,GAAG;IACf,GAAGF,UAAU;IACb,GAAGN,MAAM;IACTS,QAAQ,EAAET,MAAM,CAACS,QAAQ,CAACC,GAAG,CAAC,CAACC,GAAQ,EAAEC,CAAS,KAC/CN,UAAU,CAACG,QAAQ,CAACG,CAAC,CAAC,IAAID,GAAG,KAAKL,UAAU,CAACG,QAAQ,CAACG,CAAC,CAAC,CAACC,KAAK,GACzDP,UAAU,CAACG,QAAQ,CAACG,CAAC,CAAC,GACtB;MAAEC,KAAK,EAAEF,GAAG;MAAEG,WAAW,EAAE;IAAM,CAAC;EAE7C,CAAC;EACDN,WAAW,GAAG;IACX,GAAGA,WAAW;IACdO,iBAAiB,EAAErB,sBAAsB,CAACc,WAAW;EACxD,CAAC;EACD,MAAMQ,OAAO,GAAGf,IAAI,CAACgB,IAAI,CAAEC,GAAQ,IAAKA,GAAG,CAACC,EAAE,KAAKZ,WAAW,CAAC;EAC/D,MAAMa,SAAS,GAAGnB,IAAI,CAACgB,IAAI,CAAEC,GAAQ,IAAKA,GAAG,CAACG,IAAI,KAAKrB,MAAM,CAACsB,MAAM,CAAC;EACrE,MAAMC,aAAa,GAAGf,WAAW,CAACc,MAAM,KAAKN,OAAO,CAACK,IAAI;EAEzD,MAAMG,aAAa,GAAGtB,MAAM,CAACQ,GAAG,CAAEe,KAAU,IACzCA,KAAK,CAACN,EAAE,KAAKhB,WAAW,CAACgB,EAAE,GACtBM,KAAK,GACL;IACG,GAAGA,KAAK;IACRC,OAAO,EAAED,KAAK,CAACC,OAAO,CAAChB,GAAG,CAAEQ,GAAQ,IACjCA,GAAG,CAACC,EAAE,KAAKH,OAAO,CAAEG,EAAE;IACjB;IACA;MACG,GAAGD,GAAG;MACNS,KAAK,EAAEJ,aAAa,GACfL,GAAG,CAACS,KAAK,CACLC,MAAM,CACHC,IAAS,IAAKA,IAAI,CAACV,EAAE,KAAKX,WAAW,CAACW,EAAE,CAC3C,CACAT,GAAG,CAAC,CAACmB,IAAS,EAAEjB,CAAS,MAAM;QAC7B,GAAGiB,IAAI;QACPV,EAAE,EAAEP;MACP,CAAC,CAAC,CAAC,GACNM,GAAG,CAACS,KAAK,CAACjB,GAAG,CAAEmB,IAAS,IACrBA,IAAI,CAACV,EAAE,KAAKX,WAAW,CAACW,EAAE,GACrBU,IAAI,GACJrB,WAAW;IAE3B,CAAC;IACD;IACFU,GAAG,CAACC,EAAE,KAAKC,SAAS,CAACD,EAAE,GACrB;MACG,GAAGD,GAAG;MACNS,KAAK,EAAEJ,aAAa,GACf,CAACf,WAAW,EAAE,GAAGU,GAAG,CAACS,KAAK,CAAC,CAACjB,GAAG,CAC5B,CAACmB,IAAS,EAAEjB,CAAS,MAAM;QAAE,GAAGiB,IAAI;QAAEV,EAAE,EAAEP;MAAE,CAAC,CAAC,CAChD,GACDM,GAAG,CAACS;IACZ,CAAC,GACDT,GAAG;EAEd,CAAC,CACR;EAEDb,QAAQ,CAACR,SAAS,CAAC2B,aAAa,CAAC,CAAC;EAClCnB,QAAQ,CAACP,iBAAiB,CAACM,aAAa,CAAC,CAAC;EAC1CC,QAAQ,CAACV,cAAc,CAAC,KAAK,CAAC,CAAC;EAC/BU,QAAQ,CAACT,eAAe,CAAC,KAAK,CAAC,CAAC;AACnC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}