{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFormik } from 'formik';\nimport { manageActiveTask, manageColumnsChange, assignActiveBoard } from '../../../../../../main/slices';\nimport { countCompletedSubtasks } from '../../../../../utilities/utils';\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\nexport const useFormikValues = () => {\n  _s();\n  const {\n    managedTask,\n    activeColId,\n    activeBoardId,\n    activeBoard\n  } = useAppSelector(state => state.data);\n  const columns = activeBoard.columns;\n  const activeCol = columns.find(col => col.id === activeColId);\n  const dispatch = useAppDispatch();\n  const formik = useFormik({\n    // initial form values\n    initialValues: {\n      checked: managedTask.subtasks.filter(sub => sub.isCompleted).map(sub => sub.title),\n      status: managedTask.status\n    },\n    // validation\n    validationSchema: null,\n    // form submission\n    onSubmit: values => {\n      // subtasks checkbox\n      const managedSubtasks = handleCheckbox(managedTask, values);\n      const editedTask = {\n        ...managedSubtasks,\n        completedSubtasks: countCompletedSubtasks(managedSubtasks)\n      };\n      dispatch(manageActiveTask(editedTask));\n\n      // task status select\n      const taskIsAlien = editedTask.status !== (activeCol === null || activeCol === void 0 ? void 0 : activeCol.name);\n      // let editedColumns = [...columns];\n      if (taskIsAlien) {\n        const editedColumns = handleSelect(columns, editedTask, activeColId);\n        dispatch(manageColumnsChange(editedColumns));\n      }\n      // changes the state responsible for render\n      dispatch(assignActiveBoard(activeBoardId));\n    }\n  });\n  return {\n    formik,\n    columns,\n    managedTask\n  };\n};\n\n// Utitility functions\n_s(useFormikValues, \"42RPjHuWVSLaoQO1eXYhD+I6uC4=\", false, function () {\n  return [useAppSelector, useAppDispatch, useFormik];\n});\nconst handleCheckbox = (task, values) => ({\n  ...task,\n  status: values.status,\n  subtasks: task.subtasks.map(sub => values.checked.some(val => val === sub.title) ? {\n    ...sub,\n    isCompleted: true\n  } : {\n    ...sub,\n    isCompleted: false\n  })\n});\nconst handleSelect = (columns, editedTask, activeColId) => columns.map(col => col.id === activeColId ? {\n  ...col,\n  tasks: col.tasks.filter(task => task.id !== editedTask.id).map((task, i) => ({\n    ...task,\n    id: i\n  }))\n} : col.name === editedTask.status ? {\n  ...col,\n  tasks: [editedTask, ...col.tasks].map((task, i) => ({\n    ...task,\n    id: i\n  }))\n} : col);","map":{"version":3,"names":["useFormik","manageActiveTask","manageColumnsChange","assignActiveBoard","countCompletedSubtasks","useAppSelector","useAppDispatch","useFormikValues","managedTask","activeColId","activeBoardId","activeBoard","state","data","columns","activeCol","find","col","id","dispatch","formik","initialValues","checked","subtasks","filter","sub","isCompleted","map","title","status","validationSchema","onSubmit","values","managedSubtasks","handleCheckbox","editedTask","completedSubtasks","taskIsAlien","name","editedColumns","handleSelect","task","some","val","tasks","i"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/ManageTaskModal/formik/useFormikValues.ts"],"sourcesContent":["import { useFormik, FormikValues } from 'formik';\n\nimport {\n   manageActiveTask,\n   manageColumnsChange,\n   assignActiveBoard,\n} from '../../../../../../main/slices';\nimport { countCompletedSubtasks } from '../../../../../utilities/utils';\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\n\nexport const useFormikValues = () => {\n   const { managedTask, activeColId, activeBoardId, activeBoard } =\n      useAppSelector((state) => state.data);\n\n   const columns = activeBoard.columns;\n   const activeCol = columns.find((col) => col.id === activeColId);\n\n   const dispatch = useAppDispatch();\n\n   const formik = useFormik<FormikValues>({\n      // initial form values\n      initialValues: {\n         checked: managedTask.subtasks\n            .filter((sub) => sub.isCompleted)\n            .map((sub) => sub.title),\n         status: managedTask.status,\n      },\n\n      // validation\n      validationSchema: null,\n\n      // form submission\n      onSubmit: (values: FormikValues) => {\n         // subtasks checkbox\n         const managedSubtasks = handleCheckbox(managedTask, values);\n         const editedTask = {\n            ...managedSubtasks,\n            completedSubtasks: countCompletedSubtasks(managedSubtasks),\n         };\n         dispatch(manageActiveTask(editedTask));\n\n         // task status select\n         const taskIsAlien = editedTask.status !== activeCol?.name;\n         // let editedColumns = [...columns];\n         if (taskIsAlien) {\n            const editedColumns = handleSelect(\n               columns,\n               editedTask,\n               activeColId,\n            );\n            dispatch(manageColumnsChange(editedColumns));\n         }\n         // changes the state responsible for render\n         dispatch(assignActiveBoard(activeBoardId));\n      },\n   });\n\n   return { formik, columns, managedTask };\n};\n\n// Utitility functions\ninterface Task {\n   id: number;\n   status: string;\n   subtasks: Subtask[];\n}\n\ninterface Subtask {\n   title: string;\n}\n\ninterface Column {\n   id: number;\n   name: string;\n   tasks: Task[];\n}\n\nconst handleCheckbox = <T extends Task>(task: T, values: FormikValues): T => ({\n   ...task,\n   status: values.status,\n   subtasks: task.subtasks.map((sub) =>\n      values.checked.some((val: string) => val === sub.title)\n         ? { ...sub, isCompleted: true }\n         : { ...sub, isCompleted: false },\n   ),\n});\n\nconst handleSelect = <C extends Column, T extends Task>(\n   columns: C[],\n   editedTask: T,\n   activeColId: number,\n) =>\n   columns.map((col) =>\n      col.id === activeColId\n         ? {\n              ...col,\n              tasks: col.tasks\n                 .filter((task) => task.id !== editedTask.id)\n                 .map((task, i) => ({ ...task, id: i })),\n           }\n         : col.name === editedTask.status\n         ? {\n              ...col,\n              tasks: [editedTask, ...col.tasks].map((task, i) => ({\n                 ...task,\n                 id: i,\n              })),\n           }\n         : col,\n   );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}