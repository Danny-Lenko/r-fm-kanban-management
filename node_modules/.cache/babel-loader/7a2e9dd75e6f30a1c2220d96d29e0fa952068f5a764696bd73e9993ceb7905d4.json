{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAppDispatch, useAppSelector } from '../../hooks';\nimport { setDeletingBoard, setDeletingTask, setSubmissionTrigger } from '../../../../main/slices';\nexport let ModalTypes;\n(function (ModalTypes) {\n  ModalTypes[\"TaskManager\"] = \"taskManager\";\n  ModalTypes[\"Remover\"] = \"remover\";\n  ModalTypes[\"Temp\"] = \"temp\";\n})(ModalTypes || (ModalTypes = {}));\nexport const useAppModal = () => {\n  _s();\n  const {\n    taskManaging,\n    taskEditing,\n    boardManaging,\n    deletingBoard,\n    deletingTask\n  } = useAppSelector(state => state.modals);\n  const open = taskManaging || taskEditing || boardManaging || deletingBoard || deletingTask;\n  const dispatch = useAppDispatch();\n  const type = deletingBoard ? ModalTypes.Remover : taskManaging ? ModalTypes.TaskManager : ModalTypes.Temp;\n  function closeRemover() {\n    dispatch(setDeletingBoard(false));\n    dispatch(setDeletingTask(false));\n  }\n  function closeTaskManager() {\n    dispatch(setSubmissionTrigger(true));\n  }\n  const getOnClose = type => ({\n    [ModalTypes.Remover]: closeRemover,\n    [ModalTypes.TaskManager]: closeTaskManager,\n    [ModalTypes.Temp]: closeRemover\n\n    // [MODAL_TYPES.optional]: OptionalModal,\n  })[type];\n  return {\n    type,\n    open,\n    getOnClose\n  };\n};\n\n// export const useAppModal = () => {\n//    const [isModalOpen, setIsModalOpen] = useState(false);\n\n//    const handleOpen = () => {\n//       setIsModalOpen(true);\n//    };\n\n//    const handleClose = () => {\n//       setIsModalOpen(false);\n//    };\n\n//    return {\n//       isModalOpen,\n//       handleOpen,\n//       handleClose\n//    }\n// }\n_s(useAppModal, \"gzfrs6ohFj3tpgk/JGS0mgtrdn4=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});","map":{"version":3,"names":["useAppDispatch","useAppSelector","setDeletingBoard","setDeletingTask","setSubmissionTrigger","ModalTypes","useAppModal","taskManaging","taskEditing","boardManaging","deletingBoard","deletingTask","state","modals","open","dispatch","type","Remover","TaskManager","Temp","closeRemover","closeTaskManager","getOnClose"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/useAppModal.ts"],"sourcesContent":["import { useAppDispatch, useAppSelector } from '../../hooks';\nimport {\n   setDeletingBoard,\n   setDeletingTask,\n   setTaskManaging,\n   setSubmissionTrigger,\n} from '../../../../main/slices';\n\nexport enum ModalTypes {\n   // taskAddEdit = 'taskAddEdit',\n   // boardManage = 'boardManage',\n   TaskManager = 'taskManager',\n   Remover = 'remover',\n   Temp = 'temp',\n}\n\nexport const useAppModal = () => {\n   const {\n      taskManaging,\n      taskEditing,\n      boardManaging,\n      deletingBoard,\n      deletingTask,\n   } = useAppSelector((state) => state.modals);\n   const open =\n      taskManaging ||\n      taskEditing ||\n      boardManaging ||\n      deletingBoard ||\n      deletingTask;\n\n   const dispatch = useAppDispatch();\n\n   const type = deletingBoard\n      ? ModalTypes.Remover\n      : taskManaging\n      ? ModalTypes.TaskManager\n      : ModalTypes.Temp;\n\n   function closeRemover() {\n      dispatch(setDeletingBoard(false));\n      dispatch(setDeletingTask(false));\n   }\n\n   function closeTaskManager() {\n      dispatch(setSubmissionTrigger(true));\n   }\n\n   const getOnClose = (type: ModalTypes) =>\n      ({\n         [ModalTypes.Remover]: closeRemover,\n         [ModalTypes.TaskManager]: closeTaskManager,\n         [ModalTypes.Temp]: closeRemover,\n\n         // [MODAL_TYPES.optional]: OptionalModal,\n      }[type]);\n\n   return { type, open, getOnClose };\n};\n\n// export const useAppModal = () => {\n//    const [isModalOpen, setIsModalOpen] = useState(false);\n\n//    const handleOpen = () => {\n//       setIsModalOpen(true);\n//    };\n\n//    const handleClose = () => {\n//       setIsModalOpen(false);\n//    };\n\n//    return {\n//       isModalOpen,\n//       handleOpen,\n//       handleClose\n//    }\n// }\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAC5D,SACGC,gBAAgB,EAChBC,eAAe,EAEfC,oBAAoB,QAChB,yBAAyB;AAEhC,WAAYC,UAAU;AAMrB,WANWA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU;AAQtB,OAAO,MAAMC,WAAW,GAAG,MAAM;EAAA;EAC9B,MAAM;IACHC,YAAY;IACZC,WAAW;IACXC,aAAa;IACbC,aAAa;IACbC;EACH,CAAC,GAAGV,cAAc,CAAEW,KAAK,IAAKA,KAAK,CAACC,MAAM,CAAC;EAC3C,MAAMC,IAAI,GACPP,YAAY,IACZC,WAAW,IACXC,aAAa,IACbC,aAAa,IACbC,YAAY;EAEf,MAAMI,QAAQ,GAAGf,cAAc,EAAE;EAEjC,MAAMgB,IAAI,GAAGN,aAAa,GACrBL,UAAU,CAACY,OAAO,GAClBV,YAAY,GACZF,UAAU,CAACa,WAAW,GACtBb,UAAU,CAACc,IAAI;EAEpB,SAASC,YAAY,GAAG;IACrBL,QAAQ,CAACb,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACjCa,QAAQ,CAACZ,eAAe,CAAC,KAAK,CAAC,CAAC;EACnC;EAEA,SAASkB,gBAAgB,GAAG;IACzBN,QAAQ,CAACX,oBAAoB,CAAC,IAAI,CAAC,CAAC;EACvC;EAEA,MAAMkB,UAAU,GAAIN,IAAgB,IAChC;IACE,CAACX,UAAU,CAACY,OAAO,GAAGG,YAAY;IAClC,CAACf,UAAU,CAACa,WAAW,GAAGG,gBAAgB;IAC1C,CAAChB,UAAU,CAACc,IAAI,GAAGC;;IAEnB;EACH,CAAC,EAACJ,IAAI,CAAE;EAEX,OAAO;IAAEA,IAAI;IAAEF,IAAI;IAAEQ;EAAW,CAAC;AACpC,CAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,GA5DahB,WAAW;EAAA,QAOjBL,cAAc,EAQDD,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}