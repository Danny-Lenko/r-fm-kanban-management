{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport rowData from '../../resources/data/data.json';\nimport { countCompletedSubtasks } from '../../library/utilities/utils';\nimport { COLUMNCOLORS } from '../../library/common/constants';\nconst data = rowData.boards.map((board, i) => ({\n  ...board,\n  id: i,\n  path: board.name.split(' ').map(word => word.toLowerCase()).join('-'),\n  columns: board.columns.map((col, i) => ({\n    ...col,\n    color: COLUMNCOLORS[i],\n    id: i,\n    tasks: col.tasks.map((task, i) => {\n      let completed = 0;\n      task.subtasks.forEach(subtask => subtask.isCompleted ? completed = completed + 1 : completed);\n      return {\n        ...task,\n        id: i,\n        completedSubtasks: countCompletedSubtasks(task)\n      };\n    })\n  }))\n}));\nexport const dataSlice = createSlice({\n  name: 'data',\n  initialState: {\n    boards: data,\n    activeBoard: data[0],\n    activeBoardId: 0,\n    activeColId: 0,\n    activeTaskId: 0,\n    managedTask: data[0].columns[0].tasks[0]\n  },\n  reducers: {\n    assignActiveBoard: (state, action) => {\n      state.activeBoard = state.boards.find(board => board.id === action.payload);\n      state.activeBoardId = state.activeBoard.id;\n    },\n    assignActiveTaskCol: (state, action) => {\n      state.managedTask = action.payload;\n      state.activeTaskId = action.payload.id;\n      state.activeColId = state.activeBoard.columns.find(col => col.tasks.find(task => task.title === action.payload.title)).id;\n    },\n    manageActiveTask: (state, action) => {\n      state.boards = state.boards.map(board => board.id !== state.activeBoardId ? board : {\n        ...board,\n        columns: board.columns.map(col => col.id !== state.activeColId ? col : {\n          ...col,\n          tasks: col.tasks.map(task => task.id !== state.activeTaskId ? task : action.payload)\n        })\n      });\n    },\n    manageColumnsChange: (state, action) => {\n      state.boards = state.boards.map(board => board.id !== state.activeBoardId ? board : {\n        ...board,\n        columns: action.payload\n      });\n    },\n    setBoards: (state, action) => {\n      state.boards = action.payload;\n    }\n  }\n});\nexport const {\n  assignActiveBoard,\n  assignActiveTaskCol,\n  manageActiveTask,\n  manageColumnsChange,\n  setBoards\n} = dataSlice.actions;\nexport default dataSlice.reducer;","map":{"version":3,"names":["createSlice","rowData","countCompletedSubtasks","COLUMNCOLORS","data","boards","map","board","i","id","path","name","split","word","toLowerCase","join","columns","col","color","tasks","task","completed","subtasks","forEach","subtask","isCompleted","completedSubtasks","dataSlice","initialState","activeBoard","activeBoardId","activeColId","activeTaskId","managedTask","reducers","assignActiveBoard","state","action","find","payload","assignActiveTaskCol","title","manageActiveTask","manageColumnsChange","setBoards","actions","reducer"],"sources":["/home/danny/projects/r-fm-kanban-management/src/main/slices/dataSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport rowData from '../../resources/data/data.json';\nimport { countCompletedSubtasks } from '../../library/utilities/utils';\nimport { COLUMNCOLORS } from '../../library/common/constants';\n\nconst data = rowData.boards.map((board, i) => ({\n   ...board,\n   id: i,\n   path: board.name\n      .split(' ')\n      .map((word) => word.toLowerCase())\n      .join('-'),\n   columns: board.columns.map((col, i) => ({\n      ...col,\n      color: COLUMNCOLORS[i],\n      id: i,\n      tasks: col.tasks.map((task, i) => {\n         let completed = 0;\n         task.subtasks.forEach((subtask) =>\n            subtask.isCompleted ? (completed = completed + 1) : completed,\n         );\n         return {\n            ...task,\n            id: i,\n            completedSubtasks: countCompletedSubtasks(task),\n         };\n      }),\n   })),\n}));\n\nexport const dataSlice = createSlice({\n   name: 'data',\n   initialState: {\n      boards: data,\n      activeBoard: data[0],\n      activeBoardId: 0,\n      activeColId: 0,\n      activeTaskId: 0,\n      managedTask: data[0].columns[0].tasks[0],\n   },\n\n   reducers: {\n      assignActiveBoard: (state, action) => {\n         state.activeBoard = state.boards.find(\n            (board) => board.id === action.payload,\n         )!;\n         state.activeBoardId = state.activeBoard.id;\n      },\n\n      assignActiveTaskCol: (state, action) => {\n         state.managedTask = action.payload;\n         state.activeTaskId = action.payload.id;\n         state.activeColId = state.activeBoard.columns.find((col) =>\n            col.tasks.find((task) => task.title === action.payload.title),\n         )!.id;\n      },\n\n      manageActiveTask: (state, action) => {\n         state.boards = state.boards.map((board) =>\n            board.id !== state.activeBoardId\n               ? board\n               : {\n                    ...board,\n                    columns: board.columns.map((col) =>\n                       col.id !== state.activeColId\n                          ? col\n                          : {\n                               ...col,\n                               tasks: col.tasks.map((task) =>\n                                  task.id !== state.activeTaskId\n                                     ? task\n                                     : action.payload,\n                               ),\n                            },\n                    ),\n                 },\n         );\n      },\n\n      manageColumnsChange: (state, action) => {\n         state.boards = state.boards.map((board) =>\n            board.id !== state.activeBoardId\n               ? board\n               : {\n                    ...board,\n                    columns: action.payload,\n                 },\n         );\n      },\n\n      setBoards: (state, action) => {\n         state.boards = action.payload;\n      },\n   },\n});\n\nexport const {\n   assignActiveBoard,\n   assignActiveTaskCol,\n   manageActiveTask,\n   manageColumnsChange,\n   setBoards,\n} = dataSlice.actions;\n\nexport default dataSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,gCAAgC;AACpD,SAASC,sBAAsB,QAAQ,+BAA+B;AACtE,SAASC,YAAY,QAAQ,gCAAgC;AAE7D,MAAMC,IAAI,GAAGH,OAAO,CAACI,MAAM,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,MAAM;EAC5C,GAAGD,KAAK;EACRE,EAAE,EAAED,CAAC;EACLE,IAAI,EAAEH,KAAK,CAACI,IAAI,CACZC,KAAK,CAAC,GAAG,CAAC,CACVN,GAAG,CAAEO,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAAC,CACjCC,IAAI,CAAC,GAAG,CAAC;EACbC,OAAO,EAAET,KAAK,CAACS,OAAO,CAACV,GAAG,CAAC,CAACW,GAAG,EAAET,CAAC,MAAM;IACrC,GAAGS,GAAG;IACNC,KAAK,EAAEf,YAAY,CAACK,CAAC,CAAC;IACtBC,EAAE,EAAED,CAAC;IACLW,KAAK,EAAEF,GAAG,CAACE,KAAK,CAACb,GAAG,CAAC,CAACc,IAAI,EAAEZ,CAAC,KAAK;MAC/B,IAAIa,SAAS,GAAG,CAAC;MACjBD,IAAI,CAACE,QAAQ,CAACC,OAAO,CAAEC,OAAO,IAC3BA,OAAO,CAACC,WAAW,GAAIJ,SAAS,GAAGA,SAAS,GAAG,CAAC,GAAIA,SAAS,CAC/D;MACD,OAAO;QACJ,GAAGD,IAAI;QACPX,EAAE,EAAED,CAAC;QACLkB,iBAAiB,EAAExB,sBAAsB,CAACkB,IAAI;MACjD,CAAC;IACJ,CAAC;EACJ,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,OAAO,MAAMO,SAAS,GAAG3B,WAAW,CAAC;EAClCW,IAAI,EAAE,MAAM;EACZiB,YAAY,EAAE;IACXvB,MAAM,EAAED,IAAI;IACZyB,WAAW,EAAEzB,IAAI,CAAC,CAAC,CAAC;IACpB0B,aAAa,EAAE,CAAC;IAChBC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IACfC,WAAW,EAAE7B,IAAI,CAAC,CAAC,CAAC,CAACY,OAAO,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC;EAC1C,CAAC;EAEDe,QAAQ,EAAE;IACPC,iBAAiB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACnCD,KAAK,CAACP,WAAW,GAAGO,KAAK,CAAC/B,MAAM,CAACiC,IAAI,CACjC/B,KAAK,IAAKA,KAAK,CAACE,EAAE,KAAK4B,MAAM,CAACE,OAAO,CACvC;MACFH,KAAK,CAACN,aAAa,GAAGM,KAAK,CAACP,WAAW,CAACpB,EAAE;IAC7C,CAAC;IAED+B,mBAAmB,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAACH,WAAW,GAAGI,MAAM,CAACE,OAAO;MAClCH,KAAK,CAACJ,YAAY,GAAGK,MAAM,CAACE,OAAO,CAAC9B,EAAE;MACtC2B,KAAK,CAACL,WAAW,GAAGK,KAAK,CAACP,WAAW,CAACb,OAAO,CAACsB,IAAI,CAAErB,GAAG,IACpDA,GAAG,CAACE,KAAK,CAACmB,IAAI,CAAElB,IAAI,IAAKA,IAAI,CAACqB,KAAK,KAAKJ,MAAM,CAACE,OAAO,CAACE,KAAK,CAAC,CAC/D,CAAEhC,EAAE;IACR,CAAC;IAEDiC,gBAAgB,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MAClCD,KAAK,CAAC/B,MAAM,GAAG+B,KAAK,CAAC/B,MAAM,CAACC,GAAG,CAAEC,KAAK,IACnCA,KAAK,CAACE,EAAE,KAAK2B,KAAK,CAACN,aAAa,GAC3BvB,KAAK,GACL;QACG,GAAGA,KAAK;QACRS,OAAO,EAAET,KAAK,CAACS,OAAO,CAACV,GAAG,CAAEW,GAAG,IAC5BA,GAAG,CAACR,EAAE,KAAK2B,KAAK,CAACL,WAAW,GACvBd,GAAG,GACH;UACG,GAAGA,GAAG;UACNE,KAAK,EAAEF,GAAG,CAACE,KAAK,CAACb,GAAG,CAAEc,IAAI,IACvBA,IAAI,CAACX,EAAE,KAAK2B,KAAK,CAACJ,YAAY,GACzBZ,IAAI,GACJiB,MAAM,CAACE,OAAO;QAEzB,CAAC;MAEZ,CAAC,CACR;IACJ,CAAC;IAEDI,mBAAmB,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACrCD,KAAK,CAAC/B,MAAM,GAAG+B,KAAK,CAAC/B,MAAM,CAACC,GAAG,CAAEC,KAAK,IACnCA,KAAK,CAACE,EAAE,KAAK2B,KAAK,CAACN,aAAa,GAC3BvB,KAAK,GACL;QACG,GAAGA,KAAK;QACRS,OAAO,EAAEqB,MAAM,CAACE;MACnB,CAAC,CACR;IACJ,CAAC;IAEDK,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAAC/B,MAAM,GAAGgC,MAAM,CAACE,OAAO;IAChC;EACH;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACVJ,iBAAiB;EACjBK,mBAAmB;EACnBE,gBAAgB;EAChBC,mBAAmB;EACnBC;AACH,CAAC,GAAGjB,SAAS,CAACkB,OAAO;AAErB,eAAelB,SAAS,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}