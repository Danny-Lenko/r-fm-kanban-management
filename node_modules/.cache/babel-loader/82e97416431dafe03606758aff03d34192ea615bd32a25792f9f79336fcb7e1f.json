{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFormik } from 'formik';\nimport { manageActiveTask, assignActiveBoard, manageColumnsChange } from '../../../../../main/slices/dataSlice';\nimport { countCompletedSubtasks } from '../../../../utilities/utils';\nimport { useAppSelector, useAppDispatch } from '../../../hooks';\nexport const useManagerFormik = () => {\n  _s();\n  const task = useAppSelector(state => state.data.managedTask);\n  const activeBoardId = useAppSelector(state => state.data.activeBoardId);\n  const activeColId = useAppSelector(state => state.data.activeColId);\n  const dispatch = useAppDispatch();\n  const cols = useAppSelector(state => state.data.activeBoard.columns);\n  const activeCol = cols.find(col => col.id === activeColId);\n  const formik = useFormik({\n    initialValues: {\n      checked: task.subtasks.filter(sub => sub.isCompleted).map(sub => sub.title),\n      status: task.status\n    },\n    validationSchema: null,\n    onSubmit: values => {\n      const managedSubs = {\n        ...task,\n        status: values.status,\n        subtasks: task.subtasks.map(sub => values.checked.some(val => val === sub.title) ? {\n          ...sub,\n          isCompleted: true\n        } : {\n          ...sub,\n          isCompleted: false\n        })\n      };\n      const editedTask = {\n        ...managedSubs,\n        completedSubtasks: countCompletedSubtasks(managedSubs)\n      };\n      dispatch(manageActiveTask(editedTask));\n      console.log(values);\n\n      // task status changing logic\n      const taskIsAlien = editedTask.status !== (activeCol === null || activeCol === void 0 ? void 0 : activeCol.name);\n      let editedCols = [...cols];\n      if (taskIsAlien) {\n        editedCols = cols.map(col => col.id === activeColId ? {\n          ...col,\n          tasks: col.tasks.filter(task => task.id !== editedTask.id).map((task, i) => ({\n            ...task,\n            id: i\n          }))\n        } : col.name === editedTask.status ? {\n          ...col,\n          tasks: [editedTask, ...col.tasks].map((task, i) => ({\n            ...task,\n            id: i\n          }))\n        } : col);\n        dispatch(manageColumnsChange(editedCols));\n      }\n      // changes the state responsible for render\n      dispatch(assignActiveBoard(activeBoardId));\n    }\n  });\n  return {\n    formik,\n    cols,\n    task\n  };\n};\n_s(useManagerFormik, \"FAQLtmXf+QlEOkibGv/A5tzWjrE=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppSelector, useAppDispatch, useAppSelector, useFormik];\n});","map":{"version":3,"names":["useFormik","manageActiveTask","assignActiveBoard","manageColumnsChange","countCompletedSubtasks","useAppSelector","useAppDispatch","useManagerFormik","task","state","data","managedTask","activeBoardId","activeColId","dispatch","cols","activeBoard","columns","activeCol","find","col","id","formik","initialValues","checked","subtasks","filter","sub","isCompleted","map","title","status","validationSchema","onSubmit","values","managedSubs","some","val","editedTask","completedSubtasks","console","log","taskIsAlien","name","editedCols","tasks","i"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/ManageTaskModal/useManagerFormik.tsx"],"sourcesContent":["import { useFormik, FormikValues } from 'formik';\nimport {\n   manageActiveTask,\n   assignActiveBoard,\n   manageColumnsChange,\n} from '../../../../../main/slices/dataSlice';\nimport { countCompletedSubtasks } from '../../../../utilities/utils';\nimport { useAppSelector, useAppDispatch } from '../../../hooks';\n\nexport const useManagerFormik = () => {\n   const task = useAppSelector((state) => state.data.managedTask);\n   const activeBoardId = useAppSelector((state) => state.data.activeBoardId);\n   const activeColId = useAppSelector((state) => state.data.activeColId);\n   const dispatch = useAppDispatch();\n\n   const cols = useAppSelector((state) => state.data.activeBoard.columns);\n   const activeCol = cols.find((col) => col.id === activeColId);\n\n   const formik = useFormik<FormikValues>({\n      initialValues: {\n         checked: task.subtasks\n            .filter((sub) => sub.isCompleted)\n            .map((sub) => sub.title),\n         status: task.status,\n      },\n      validationSchema: null,\n\n      onSubmit: (values: FormikValues) => {\n         const managedSubs = {\n            ...task,\n            status: values.status,\n            subtasks: task.subtasks.map((sub) =>\n               values.checked.some((val: string) => val === sub.title)\n                  ? { ...sub, isCompleted: true }\n                  : { ...sub, isCompleted: false },\n            ),\n         };\n         const editedTask = {\n            ...managedSubs,\n            completedSubtasks: countCompletedSubtasks(managedSubs),\n         };\n         dispatch(manageActiveTask(editedTask));\n\n         console.log(values);\n\n         // task status changing logic\n         const taskIsAlien = editedTask.status !== activeCol?.name;\n         let editedCols = [...cols];\n         if (taskIsAlien) {\n            editedCols = cols.map((col) =>\n               col.id === activeColId\n                  ? {\n                       ...col,\n                       tasks: col.tasks\n                          .filter((task) => task.id !== editedTask.id)\n                          .map((task, i) => ({ ...task, id: i })),\n                    }\n                  : col.name === editedTask.status\n                  ? {\n                       ...col,\n                       tasks: [editedTask, ...col.tasks].map((task, i) => ({\n                          ...task,\n                          id: i,\n                       })),\n                    }\n                  : col,\n            );\n            dispatch(manageColumnsChange(editedCols));\n         }\n         // changes the state responsible for render\n         dispatch(assignActiveBoard(activeBoardId));\n      },\n   });\n\n   return { formik, cols, task };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}