{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\nimport { saveBoardChanges, createBoard } from '.';\nexport const useBoardFormik = () => {\n  _s();\n  const {\n    boards,\n    activeBoard,\n    activeBoardId,\n    activeColId,\n    managedTask: activeTask\n  } = useAppSelector(state => state.data);\n  const {\n    columns\n  } = activeBoard;\n  const isExisting = useAppSelector(state => state.modals.isExistingBoard);\n  const dispatch = useAppDispatch();\n  const initialValues = isExisting ? {\n    name: activeBoard.name,\n    columns: activeBoard.columns.map(col => col.name)\n  } : {\n    name: '',\n    columns: ['', '']\n  };\n  const submissionParams = {\n    columns,\n    boards,\n    activeBoard,\n    activeBoardId,\n    dispatch,\n    activeTask,\n    activeColId\n  };\n  const submit = values => isExisting ? saveBoardChanges({\n    values,\n    ...submissionParams\n  }) : createBoard({\n    values,\n    ...submissionParams\n  });\n  return {\n    initialValues,\n    submit\n  };\n};\n_s(useBoardFormik, \"hzGQsEIMZ9kufFrL/pW52ExKqcE=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppDispatch];\n});","map":{"version":3,"names":["useAppSelector","useAppDispatch","saveBoardChanges","createBoard","useBoardFormik","boards","activeBoard","activeBoardId","activeColId","managedTask","activeTask","state","data","columns","isExisting","modals","isExistingBoard","dispatch","initialValues","name","map","col","submissionParams","submit","values"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditBoardModal/BoardFormik/useBoardFormik.ts"],"sourcesContent":["import { useAppSelector, useAppDispatch } from '../../../../hooks';\n\nimport { BoardValues, saveBoardChanges, createBoard } from '.';\n\nexport const useBoardFormik = () => {\n   const {\n      boards,\n      activeBoard,\n      activeBoardId,\n      activeColId,\n      managedTask: activeTask,\n   } = useAppSelector((state) => state.data);\n   const { columns } = activeBoard;\n   const isExisting = useAppSelector((state) => state.modals.isExistingBoard);\n   const dispatch = useAppDispatch();\n\n   const initialValues = isExisting\n      ? {\n           name: activeBoard.name,\n           columns: activeBoard.columns.map((col) => col.name),\n        }\n      : {\n           name: '',\n           columns: ['', ''],\n        };\n\n   const submissionParams = {\n      columns,\n      boards,\n      activeBoard,\n      activeBoardId,\n      dispatch,\n      activeTask,\n      activeColId,\n   };\n\n   const submit = (values: BoardValues) =>\n      isExisting\n         ? saveBoardChanges({ values, ...submissionParams })\n         : createBoard({ values, ...submissionParams });\n\n   return {\n      initialValues,\n      submit,\n   };\n};\n"],"mappings":";AAAA,SAASA,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAElE,SAAsBC,gBAAgB,EAAEC,WAAW,QAAQ,GAAG;AAE9D,OAAO,MAAMC,cAAc,GAAG,MAAM;EAAA;EACjC,MAAM;IACHC,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC,WAAW;IACXC,WAAW,EAAEC;EAChB,CAAC,GAAGV,cAAc,CAAEW,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACzC,MAAM;IAAEC;EAAQ,CAAC,GAAGP,WAAW;EAC/B,MAAMQ,UAAU,GAAGd,cAAc,CAAEW,KAAK,IAAKA,KAAK,CAACI,MAAM,CAACC,eAAe,CAAC;EAC1E,MAAMC,QAAQ,GAAGhB,cAAc,EAAE;EAEjC,MAAMiB,aAAa,GAAGJ,UAAU,GAC3B;IACGK,IAAI,EAAEb,WAAW,CAACa,IAAI;IACtBN,OAAO,EAAEP,WAAW,CAACO,OAAO,CAACO,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACF,IAAI;EACrD,CAAC,GACD;IACGA,IAAI,EAAE,EAAE;IACRN,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;EACnB,CAAC;EAEN,MAAMS,gBAAgB,GAAG;IACtBT,OAAO;IACPR,MAAM;IACNC,WAAW;IACXC,aAAa;IACbU,QAAQ;IACRP,UAAU;IACVF;EACH,CAAC;EAED,MAAMe,MAAM,GAAIC,MAAmB,IAChCV,UAAU,GACLZ,gBAAgB,CAAC;IAAEsB,MAAM;IAAE,GAAGF;EAAiB,CAAC,CAAC,GACjDnB,WAAW,CAAC;IAAEqB,MAAM;IAAE,GAAGF;EAAiB,CAAC,CAAC;EAEpD,OAAO;IACJJ,aAAa;IACbK;EACH,CAAC;AACJ,CAAC;AAAC,GAzCWnB,cAAc;EAAA,QAOpBJ,cAAc,EAECA,cAAc,EAChBC,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}