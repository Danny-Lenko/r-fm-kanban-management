{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/modules/Board/Board.tsx\",\n  _s = $RefreshSig$();\nimport { Typography, Stack } from '@mui/material';\nimport TaskCard from './TaskCard/TaskCard';\nimport { useAppSelector, useAppDispatch } from '../../library/common/hooks';\nimport { setBoards, assignActiveBoard } from '../../main/slices/dataSlice';\nimport { COLUMNCOLORS } from '../../library/common/constants';\nimport { CssBoard, CssScrollable, CssInteractiveScreen, CssColumn, CssColorLabel, CssColumnButton } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Board = () => {\n  _s();\n  const {\n    activeBoard,\n    boards\n  } = useAppSelector(state => state.data);\n  const {\n    columns\n  } = activeBoard;\n  const dispatch = useAppDispatch();\n  function addNewColumn() {\n    const boardsUpdated = boards.map(board => {\n      const {\n        id,\n        columns\n      } = board;\n      return id !== activeBoard.id ? board : {\n        ...board,\n        columns: [...board.columns, {\n          id: columns.length,\n          name: `NewColumn${columns.length + 1}`,\n          tasks: [],\n          color: COLUMNCOLORS[columns.length] ? COLUMNCOLORS[columns.length] : '#E4EBFA'\n        }]\n      };\n    });\n    dispatch(setBoards(boardsUpdated));\n    dispatch(assignActiveBoard(activeBoard.id));\n  }\n  return /*#__PURE__*/_jsxDEV(CssBoard, {\n    children: [/*#__PURE__*/_jsxDEV(CssScrollable, {\n      children: /*#__PURE__*/_jsxDEV(CssInteractiveScreen, {\n        children: columns.map(col => {\n          const {\n            name,\n            color,\n            tasks\n          } = col;\n          return /*#__PURE__*/_jsxDEV(CssColumn, {\n            spacing: 2.5,\n            children: [/*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(CssColorLabel, {\n                color: color\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 28\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: 'h5',\n                textTransform: 'uppercase',\n                children: [name, \" (\", tasks.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 25\n            }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n              ...task\n            }, task.title, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 28\n            }, this))]\n          }, name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(CssColumnButton, {\n      onClick: addNewColumn,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"+ New Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n};\n_s(Board, \"x2D6OpcHs3tMT8lG/83oKmZAqIk=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Typography","Stack","TaskCard","useAppSelector","useAppDispatch","setBoards","assignActiveBoard","COLUMNCOLORS","CssBoard","CssScrollable","CssInteractiveScreen","CssColumn","CssColorLabel","CssColumnButton","Board","activeBoard","boards","state","data","columns","dispatch","addNewColumn","boardsUpdated","map","board","id","length","name","tasks","color","col","variant","textTransform","task","title"],"sources":["/home/danny/projects/r-fm-kanban-management/src/modules/Board/Board.tsx"],"sourcesContent":["import { Typography, Stack } from '@mui/material';\n\nimport TaskCard from './TaskCard/TaskCard';\n\nimport { useAppSelector, useAppDispatch } from '../../library/common/hooks';\nimport { setBoards, assignActiveBoard } from '../../main/slices/dataSlice';\nimport { COLUMNCOLORS } from '../../library/common/constants';\n\nimport {\n   CssBoard,\n   CssScrollable,\n   CssInteractiveScreen,\n   CssColumn,\n   CssColorLabel,\n   CssColumnButton,\n} from '.';\n\nexport const Board = () => {\n   const { activeBoard, boards } = useAppSelector((state) => state.data);\n   const { columns } = activeBoard;\n   const dispatch = useAppDispatch();\n\n   function addNewColumn() {\n      const boardsUpdated = boards.map((board) => {\n         const { id, columns } = board;\n\n         return id !== activeBoard.id\n            ? board\n            : {\n                 ...board,\n                 columns: [\n                    ...board.columns,\n                    {\n                       id: columns.length,\n                       name: `NewColumn${columns.length + 1}`,\n                       tasks: [],\n                       color: COLUMNCOLORS[columns.length]\n                          ? COLUMNCOLORS[columns.length]\n                          : '#E4EBFA',\n                    },\n                 ],\n              };\n      });\n\n      dispatch(setBoards(boardsUpdated));\n      dispatch(assignActiveBoard(activeBoard.id));\n   }\n\n   return (\n      <CssBoard>\n         <CssScrollable>\n            <CssInteractiveScreen>\n               {columns.map((col) => {\n                  const { name, color, tasks } = col;\n\n                  return (\n                     <CssColumn key={name} spacing={2.5}>\n                        <Stack direction='row' spacing={1}>\n                           <CssColorLabel color={color} />\n                           <Typography\n                              {...{ variant: 'h5', textTransform: 'uppercase' }}\n                           >\n                              {name} ({tasks.length})\n                           </Typography>\n                        </Stack>\n                        {tasks.map((task) => (\n                           <TaskCard key={task.title} {...task} />\n                        ))}\n                     </CssColumn>\n                  );\n               })}\n            </CssInteractiveScreen>\n         </CssScrollable>\n\n         <CssColumnButton onClick={addNewColumn}>\n            <Typography variant='h2'>+ New Column</Typography>\n         </CssColumnButton>\n      </CssBoard>\n   );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}