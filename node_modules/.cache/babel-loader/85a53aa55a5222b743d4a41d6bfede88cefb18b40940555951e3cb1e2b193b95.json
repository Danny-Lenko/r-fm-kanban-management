{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport { schema } from './editorFormikValidation';\nimport { createTask } from './editorCreateTask';\nimport { saveChanges } from './editorSaveChanges';\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditorFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    boards,\n    activeBoard,\n    activeBoardId,\n    activeColId,\n    managedTask: activeTask\n  } = useAppSelector(state => state.data);\n  const {\n    columns: cols\n  } = activeBoard;\n  const isExisting = useAppSelector(state => state.modals.isExistingTask);\n  const dispatch = useAppDispatch();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: isExisting ? {\n      title: activeTask.title,\n      description: activeTask.description,\n      subtasks: activeTask.subtasks.map(sub => sub.title),\n      status: activeTask.status\n    } : {\n      title: '',\n      description: '',\n      subtasks: ['', ''],\n      status: cols[0].name\n    },\n    validationSchema: schema,\n    onSubmit: values => {\n      const submissionParams = {\n        values,\n        cols,\n        boards,\n        activeBoard,\n        activeBoardId,\n        dispatch,\n        activeTask,\n        activeColId\n      };\n      return isExisting ? saveChanges(submissionParams) : createTask(submissionParams);\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n_s(EditorFormik, \"hzGQsEIMZ9kufFrL/pW52ExKqcE=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppDispatch];\n});\n_c = EditorFormik;\nvar _c;\n$RefreshReg$(_c, \"EditorFormik\");","map":{"version":3,"names":["Formik","schema","createTask","saveChanges","useAppSelector","useAppDispatch","EditorFormik","children","boards","activeBoard","activeBoardId","activeColId","managedTask","activeTask","state","data","columns","cols","isExisting","modals","isExistingTask","dispatch","title","description","subtasks","map","sub","status","name","values","submissionParams"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport { schema } from './editorFormikValidation';\nimport { createTask } from './editorCreateTask';\nimport { saveChanges } from './editorSaveChanges';\n\n\n\nimport { useAppSelector, useAppDispatch } from '../../../../hooks';\n\ntype Values = FormikProps<{\n   title: string;\n   description: string;\n   subtasks: string[];\n   status: string;\n}>;\n\ntype Props = {\n   children: (props: Values) => React.ReactNode;\n};\n\nexport const EditorFormik: React.FC<Props> = ({ children }) => {\n   const {\n      boards,\n      activeBoard,\n      activeBoardId,\n      activeColId,\n      managedTask: activeTask,\n   } = useAppSelector((state) => state.data);\n   const { columns: cols } = activeBoard;\n   const isExisting = useAppSelector((state) => state.modals.isExistingTask);\n   const dispatch = useAppDispatch();\n\n   return (\n      <Formik\n         initialValues={\n            isExisting\n               ? {\n                    title: activeTask.title,\n                    description: activeTask.description,\n                    subtasks: activeTask.subtasks.map((sub) => sub.title),\n                    status: activeTask.status,\n                 }\n               : {\n                    title: '',\n                    description: '',\n                    subtasks: ['', ''],\n                    status: cols[0].name,\n                 }\n         }\n         validationSchema={schema}\n         onSubmit={(values) => {\n            const submissionParams = {\n               values,\n               cols,\n               boards,\n               activeBoard,\n               activeBoardId,\n               dispatch,\n               activeTask,\n               activeColId,\n            };\n            return isExisting\n               ? saveChanges(submissionParams)\n               : createTask(submissionParams);\n         }}\n      >\n         {children}\n      </Formik>\n   );\n};"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,WAAW,QAAQ,qBAAqB;AAIjD,SAASC,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAAC;AAanE,OAAO,MAAMC,YAA6B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvD,MAAM;IACHC,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC,WAAW;IACXC,WAAW,EAAEC;EAChB,CAAC,GAAGT,cAAc,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC;EACzC,MAAM;IAAEC,OAAO,EAAEC;EAAK,CAAC,GAAGR,WAAW;EACrC,MAAMS,UAAU,GAAGd,cAAc,CAAEU,KAAK,IAAKA,KAAK,CAACK,MAAM,CAACC,cAAc,CAAC;EACzE,MAAMC,QAAQ,GAAGhB,cAAc,EAAE;EAEjC,oBACG,QAAC,MAAM;IACJ,aAAa,EACVa,UAAU,GACL;MACGI,KAAK,EAAET,UAAU,CAACS,KAAK;MACvBC,WAAW,EAAEV,UAAU,CAACU,WAAW;MACnCC,QAAQ,EAAEX,UAAU,CAACW,QAAQ,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACJ,KAAK,CAAC;MACrDK,MAAM,EAAEd,UAAU,CAACc;IACtB,CAAC,GACD;MACGL,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MAClBG,MAAM,EAAEV,IAAI,CAAC,CAAC,CAAC,CAACW;IACnB,CACP;IACD,gBAAgB,EAAE3B,MAAO;IACzB,QAAQ,EAAG4B,MAAM,IAAK;MACnB,MAAMC,gBAAgB,GAAG;QACtBD,MAAM;QACNZ,IAAI;QACJT,MAAM;QACNC,WAAW;QACXC,aAAa;QACbW,QAAQ;QACRR,UAAU;QACVF;MACH,CAAC;MACD,OAAOO,UAAU,GACZf,WAAW,CAAC2B,gBAAgB,CAAC,GAC7B5B,UAAU,CAAC4B,gBAAgB,CAAC;IACpC,CAAE;IAAA,UAEDvB;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GAjDWD,YAA6B;EAAA,QAOnCF,cAAc,EAECA,cAAc,EAChBC,cAAc;AAAA;AAAA,KAVrBC,YAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}