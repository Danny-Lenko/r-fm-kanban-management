{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useFormikValues } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nYup.addMethod(Yup.array, 'unique', function (message) {\n  let mapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : a => a;\n  return this.test('unique', message, function (list) {\n    return (list === null || list === void 0 ? void 0 : list.length) === new Set(list === null || list === void 0 ? void 0 : list.map(mapper)).size;\n  });\n});\nexport const EditorFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    initialValues,\n    submit\n  } = useFormikValues();\n\n  // Yup.addMethod(\n  //    Yup.array,\n  //    'unique',\n  //    function (message, mapper = (a: string) => a) {\n  //       return this.test('unique', message, function (list) {\n  //          return list?.length === new Set(list?.map(mapper)).size;\n  //       });\n  //    },\n  // );\n\n  const schema = Yup.object().shape({\n    title: Yup.string().trim().required(\"Can't be empty\"),\n    description: Yup.string().trim(),\n    subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\")).unique('not unique', a => a.ensure)\n    // .unique('contractNum', 'Please provide a unique number.'),\n  });\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: values => submit(values),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n_s(EditorFormik, \"C7mVacx7UNsmpRzQ6Gt1f1//0WE=\", false, function () {\n  return [useFormikValues];\n});\n_c = EditorFormik;\nvar _c;\n$RefreshReg$(_c, \"EditorFormik\");","map":{"version":3,"names":["Formik","Yup","useFormikValues","addMethod","array","message","mapper","a","test","list","length","Set","map","size","EditorFormik","children","initialValues","submit","schema","object","shape","title","string","trim","required","description","subtasks","of","unique","ensure","values"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useFormikValues, Values } from '.';\n\ntype FormikValues = FormikProps<Values>;\n\ntype Props = {\n   children: (props: FormikValues) => React.ReactNode;\n};\n\ndeclare module 'yup' {\n   interface ArraySchema<T> {\n      unique(message: string, mapper?: (a: T) => any): this;\n   }\n}\n\nYup.addMethod(Yup.array, 'unique', function (message, mapper = (a: any) => a) {\n   return this.test('unique', message, function (list) {\n      return list?.length === new Set(list?.map(mapper)).size;\n   });\n});\n\n\nexport const EditorFormik: React.FC<Props> = ({ children }) => {\n   const { initialValues, submit } = useFormikValues();\n\n   // Yup.addMethod(\n   //    Yup.array,\n   //    'unique',\n   //    function (message, mapper = (a: string) => a) {\n   //       return this.test('unique', message, function (list) {\n   //          return list?.length === new Set(list?.map(mapper)).size;\n   //       });\n   //    },\n   // );\n\n   const schema = Yup.object().shape({\n      title: Yup.string().trim().required(\"Can't be empty\"),\n      description: Yup.string().trim(),\n      subtasks: Yup.array()\n         .of(Yup.string().trim().required(\"Can't be empty\"))\n         .unique('not unique', (a) => a.ensure),\n      // .unique('contractNum', 'Please provide a unique number.'),\n   });\n\n   return (\n      <Formik\n         initialValues={initialValues}\n         validationSchema={schema}\n         onSubmit={(values) => submit(values)}\n      >\n         {children}\n      </Formik>\n   );\n};\n"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,eAAe,QAAgB,GAAG;AAAC;AAc5CD,GAAG,CAACE,SAAS,CAACF,GAAG,CAACG,KAAK,EAAE,QAAQ,EAAE,UAAUC,OAAO,EAA0B;EAAA,IAAxBC,MAAM,uEAAIC,CAAM,IAAKA,CAAC;EACzE,OAAO,IAAI,CAACC,IAAI,CAAC,QAAQ,EAAEH,OAAO,EAAE,UAAUI,IAAI,EAAE;IACjD,OAAO,CAAAA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEC,MAAM,MAAK,IAAIC,GAAG,CAACF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,GAAG,CAACN,MAAM,CAAC,CAAC,CAACO,IAAI;EAC1D,CAAC,CAAC;AACL,CAAC,CAAC;AAGF,OAAO,MAAMC,YAA6B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGf,eAAe,EAAE;;EAEnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMgB,MAAM,GAAGjB,GAAG,CAACkB,MAAM,EAAE,CAACC,KAAK,CAAC;IAC/BC,KAAK,EAAEpB,GAAG,CAACqB,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;IACrDC,WAAW,EAAExB,GAAG,CAACqB,MAAM,EAAE,CAACC,IAAI,EAAE;IAChCG,QAAQ,EAAEzB,GAAG,CAACG,KAAK,EAAE,CACjBuB,EAAE,CAAC1B,GAAG,CAACqB,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAClDI,MAAM,CAAC,YAAY,EAAGrB,CAAC,IAAKA,CAAC,CAACsB,MAAM;IACxC;EACH,CAAC,CAAC;;EAEF,oBACG,QAAC,MAAM;IACJ,aAAa,EAAEb,aAAc;IAC7B,gBAAgB,EAAEE,MAAO;IACzB,QAAQ,EAAGY,MAAM,IAAKb,MAAM,CAACa,MAAM,CAAE;IAAA,UAEpCf;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GA/BWD,YAA6B;EAAA,QACLZ,eAAe;AAAA;AAAA,KADvCY,YAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}