{"ast":null,"code":"import { setBoardEditing, setIsExistingBoard } from '../../../../../../main/slices/modalSlice';\nimport { setBoards, assignActiveBoard } from '../../../../../../main/slices/dataSlice';\n// saveBoardChanges\nexport const saveBoardChanges = _ref => {\n  let {\n    values,\n    boards,\n    dispatch,\n    activeBoard\n  } = _ref;\n  const boardUpdated = {\n    id: activeBoard.id,\n    columns: values.columns.map((col, i) => activeBoard.columns[i] && {\n      ...activeBoard.columns[i],\n      name: col\n    }),\n    name: values.name,\n    path: values.name.split(' ').map(word => word.toLowerCase()).join('-')\n  };\n  const boardsUpdated = [...boards];\n  boardsUpdated[activeBoard.id] = boardUpdated;\n  dispatch(setBoards(boardsUpdated));\n  dispatch(assignActiveBoard(activeBoard.id));\n  dispatch(setIsExistingBoard(false));\n  dispatch(setBoardEditing(false));\n};\n\n// createBoard\nexport const createBoard = _ref2 => {\n  let {\n    values,\n    boards,\n    dispatch\n  } = _ref2;\n  const newBoard = {\n    id: boards.length,\n    columns: values.columns.map((col, i) => ({\n      id: i,\n      name: col,\n      tasks: []\n    })),\n    name: values.name,\n    path: values.name.split(' ').map(word => word.toLowerCase()).join('-')\n  };\n  const boardsUpdated = [...boards, newBoard];\n  dispatch(setBoards(boardsUpdated));\n  dispatch(assignActiveBoard(boards.length));\n  dispatch(setBoardEditing(false));\n};","map":{"version":3,"names":["setBoardEditing","setIsExistingBoard","setBoards","assignActiveBoard","saveBoardChanges","values","boards","dispatch","activeBoard","boardUpdated","id","columns","map","col","i","name","path","split","word","toLowerCase","join","boardsUpdated","createBoard","newBoard","length","tasks"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditBoardModal/BoardFormik/utils.ts"],"sourcesContent":["import {\n   setBoardEditing,\n   setIsExistingBoard,\n} from '../../../../../../main/slices/modalSlice';\nimport {\n   setBoards,\n   assignActiveBoard,\n} from '../../../../../../main/slices/dataSlice';\n\nimport { ISumbissionParams } from '../../../../../interfaces';\n\nexport type BoardValues = {\n   name: string;\n   columns: string[];\n};\n\ninterface Props extends ISumbissionParams {\n   values: BoardValues;\n}\n\n// saveBoardChanges\nexport const saveBoardChanges = ({\n   values,\n   boards,\n   dispatch,\n   activeBoard,\n}: Props) => {\n   const boardUpdated = {\n      id: activeBoard.id,\n      columns: values.columns.map(\n         (col, i) =>\n            activeBoard.columns[i] && { ...activeBoard.columns[i], name: col },\n      ),\n      name: values.name,\n      path: values.name\n         .split(' ')\n         .map((word) => word.toLowerCase())\n         .join('-'),\n   };\n\n   const boardsUpdated = [...boards];\n   boardsUpdated[activeBoard.id] = boardUpdated;\n\n   dispatch(setBoards(boardsUpdated));\n   dispatch(assignActiveBoard(activeBoard.id));\n   dispatch(setIsExistingBoard(false));\n   dispatch(setBoardEditing(false));\n};\n\n// createBoard\nexport const createBoard = ({ values, boards, dispatch }: Props) => {\n   const newBoard = {\n      id: boards.length,\n      columns: values.columns.map((col, i) => ({\n         id: i,\n         name: col,\n         tasks: [],\n      })),\n      name: values.name,\n      path: values.name\n         .split(' ')\n         .map((word) => word.toLowerCase())\n         .join('-'),\n   };\n\n   const boardsUpdated = [...boards, newBoard];\n\n   dispatch(setBoards(boardsUpdated));\n   dispatch(assignActiveBoard(boards.length));\n   dispatch(setBoardEditing(false));\n};\n"],"mappings":"AAAA,SACGA,eAAe,EACfC,kBAAkB,QACd,0CAA0C;AACjD,SACGC,SAAS,EACTC,iBAAiB,QACb,yCAAyC;AAahD;AACA,OAAO,MAAMC,gBAAgB,GAAG,QAKnB;EAAA,IALoB;IAC9BC,MAAM;IACNC,MAAM;IACNC,QAAQ;IACRC;EACI,CAAC;EACL,MAAMC,YAAY,GAAG;IAClBC,EAAE,EAAEF,WAAW,CAACE,EAAE;IAClBC,OAAO,EAAEN,MAAM,CAACM,OAAO,CAACC,GAAG,CACxB,CAACC,GAAG,EAAEC,CAAC,KACJN,WAAW,CAACG,OAAO,CAACG,CAAC,CAAC,IAAI;MAAE,GAAGN,WAAW,CAACG,OAAO,CAACG,CAAC,CAAC;MAAEC,IAAI,EAAEF;IAAI,CAAC,CACvE;IACDE,IAAI,EAAEV,MAAM,CAACU,IAAI;IACjBC,IAAI,EAAEX,MAAM,CAACU,IAAI,CACbE,KAAK,CAAC,GAAG,CAAC,CACVL,GAAG,CAAEM,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAAC,CACjCC,IAAI,CAAC,GAAG;EACf,CAAC;EAED,MAAMC,aAAa,GAAG,CAAC,GAAGf,MAAM,CAAC;EACjCe,aAAa,CAACb,WAAW,CAACE,EAAE,CAAC,GAAGD,YAAY;EAE5CF,QAAQ,CAACL,SAAS,CAACmB,aAAa,CAAC,CAAC;EAClCd,QAAQ,CAACJ,iBAAiB,CAACK,WAAW,CAACE,EAAE,CAAC,CAAC;EAC3CH,QAAQ,CAACN,kBAAkB,CAAC,KAAK,CAAC,CAAC;EACnCM,QAAQ,CAACP,eAAe,CAAC,KAAK,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMsB,WAAW,GAAG,SAAyC;EAAA,IAAxC;IAAEjB,MAAM;IAAEC,MAAM;IAAEC;EAAgB,CAAC;EAC5D,MAAMgB,QAAQ,GAAG;IACdb,EAAE,EAAEJ,MAAM,CAACkB,MAAM;IACjBb,OAAO,EAAEN,MAAM,CAACM,OAAO,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,MAAM;MACtCJ,EAAE,EAAEI,CAAC;MACLC,IAAI,EAAEF,GAAG;MACTY,KAAK,EAAE;IACV,CAAC,CAAC,CAAC;IACHV,IAAI,EAAEV,MAAM,CAACU,IAAI;IACjBC,IAAI,EAAEX,MAAM,CAACU,IAAI,CACbE,KAAK,CAAC,GAAG,CAAC,CACVL,GAAG,CAAEM,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAAC,CACjCC,IAAI,CAAC,GAAG;EACf,CAAC;EAED,MAAMC,aAAa,GAAG,CAAC,GAAGf,MAAM,EAAEiB,QAAQ,CAAC;EAE3ChB,QAAQ,CAACL,SAAS,CAACmB,aAAa,CAAC,CAAC;EAClCd,QAAQ,CAACJ,iBAAiB,CAACG,MAAM,CAACkB,MAAM,CAAC,CAAC;EAC1CjB,QAAQ,CAACP,eAAe,CAAC,KAAK,CAAC,CAAC;AACnC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}