{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/BoardsList/BoardsList.tsx\",\n  _s = $RefreshSig$();\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport Box from '@mui/material/Box';\n// import DrawerBoardBtn from '../DrawerBoardBtn';\n\nimport { DrawerBoardBtn } from '..';\nimport { useAppSelector, useAppDispatch } from '../../hooks';\nimport { useNavigate } from 'react-router-dom';\nimport { setBoardManaging, setXsBoardsOpen } from '../../../../main/slices/modalSlice';\nimport { assignActiveBoard } from '../../../../main/slices/dataSlice';\nimport { boardsListStyles } from './boardsListStyles';\nimport useTheme from '@mui/material/styles/useTheme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardsList = () => {\n  _s();\n  const boards = useAppSelector(state => state.data.boards);\n  const xsBoardsOpen = useAppSelector(state => state.modals.xsBoardsOpen);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const theme = useTheme();\n  const handleOldBoardClick = board => {\n    dispatch(assignActiveBoard(board.id));\n    navigate(`${board.path}`);\n  };\n  const handleCreateBoardClick = () => {\n    dispatch(setBoardManaging(true));\n    dispatch(setXsBoardsOpen(false));\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: boardsListStyles(theme),\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      textTransform: \"uppercase\",\n      px: xsBoardsOpen ? 3 : 0,\n      py: xsBoardsOpen ? 1 : 0,\n      mt: 2,\n      children: [\"all boards (\", boards.length, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          maxHeight: '50vh',\n          overflowY: 'auto'\n        },\n        children: boards.map(board => /*#__PURE__*/_jsxDEV(DrawerBoardBtn, {\n          props: {\n            board: board,\n            btnClick: () => handleOldBoardClick(board),\n            btnText: board.name\n          }\n        }, board.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DrawerBoardBtn, {\n        props: {\n          board: null,\n          btnClick: () => handleCreateBoardClick(),\n          btnText: '+ Create New Board'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n};\n_s(BoardsList, \"Y1HfzTFVSsIsCjFYYtfEB7FryOg=\", false, function () {\n  return [useAppSelector, useAppSelector, useAppDispatch, useNavigate, useTheme];\n});\n_c = BoardsList;\nexport default BoardsList;\nvar _c;\n$RefreshReg$(_c, \"BoardsList\");","map":{"version":3,"names":["Typography","List","Box","DrawerBoardBtn","useAppSelector","useAppDispatch","useNavigate","setBoardManaging","setXsBoardsOpen","assignActiveBoard","boardsListStyles","useTheme","BoardsList","boards","state","data","xsBoardsOpen","modals","dispatch","navigate","theme","handleOldBoardClick","board","id","path","handleCreateBoardClick","length","maxHeight","overflowY","map","btnClick","btnText","name"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/BoardsList/BoardsList.tsx"],"sourcesContent":["import Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport Box from '@mui/material/Box';\n// import DrawerBoardBtn from '../DrawerBoardBtn';\n\nimport { DrawerBoardBtn } from '..';\n\nimport { useAppSelector, useAppDispatch } from '../../hooks';\nimport { useNavigate } from 'react-router-dom';\nimport {\n   setBoardManaging,\n   setXsBoardsOpen,\n} from '../../../../main/slices/modalSlice';\nimport { assignActiveBoard } from '../../../../main/slices/dataSlice';\nimport { boardsListStyles } from './boardsListStyles';\nimport useTheme from '@mui/material/styles/useTheme';\n\nconst BoardsList = () => {\n   const boards = useAppSelector((state) => state.data.boards);\n   const xsBoardsOpen = useAppSelector((state) => state.modals.xsBoardsOpen);\n   const dispatch = useAppDispatch();\n   const navigate = useNavigate();\n   const theme = useTheme();\n\n   const handleOldBoardClick = (board: any) => {\n      dispatch(assignActiveBoard(board.id));\n      navigate(`${board.path}`);\n   };\n\n   const handleCreateBoardClick = () => {\n      dispatch(setBoardManaging(true));\n      dispatch(setXsBoardsOpen(false));\n   };\n\n   return (\n      <Box sx={boardsListStyles(theme)}>\n         <Typography\n            variant='h5'\n            textTransform='uppercase'\n            px={xsBoardsOpen ? 3 : 0}\n            py={xsBoardsOpen ? 1 : 0}\n            mt={2}\n         >\n            all boards ({boards.length})\n         </Typography>\n         <List>\n            <Box sx={{ maxHeight: '50vh', overflowY: 'auto' }}>\n               {boards.map((board) => (\n                  <DrawerBoardBtn\n                     key={board.id}\n                     props={{\n                        board: board,\n                        btnClick: () => handleOldBoardClick(board),\n                        btnText: board.name,\n                     }}\n                  />\n               ))}\n            </Box>\n            <DrawerBoardBtn\n               props={{\n                  board: null,\n                  btnClick: () => handleCreateBoardClick(),\n                  btnText: '+ Create New Board',\n               }}\n            />\n         </List>\n      </Box>\n   );\n};\n\nexport default BoardsList;\n"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,GAAG,MAAM,mBAAmB;AACnC;;AAEA,SAASC,cAAc,QAAQ,IAAI;AAEnC,SAASC,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAC5D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SACGC,gBAAgB,EAChBC,eAAe,QACX,oCAAoC;AAC3C,SAASC,iBAAiB,QAAQ,mCAAmC;AACrE,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,OAAOC,QAAQ,MAAM,+BAA+B;AAAC;AAErD,MAAMC,UAAU,GAAG,MAAM;EAAA;EACtB,MAAMC,MAAM,GAAGT,cAAc,CAAEU,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,MAAM,CAAC;EAC3D,MAAMG,YAAY,GAAGZ,cAAc,CAAEU,KAAK,IAAKA,KAAK,CAACG,MAAM,CAACD,YAAY,CAAC;EACzE,MAAME,QAAQ,GAAGb,cAAc,EAAE;EACjC,MAAMc,QAAQ,GAAGb,WAAW,EAAE;EAC9B,MAAMc,KAAK,GAAGT,QAAQ,EAAE;EAExB,MAAMU,mBAAmB,GAAIC,KAAU,IAAK;IACzCJ,QAAQ,CAACT,iBAAiB,CAACa,KAAK,CAACC,EAAE,CAAC,CAAC;IACrCJ,QAAQ,CAAE,GAAEG,KAAK,CAACE,IAAK,EAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,sBAAsB,GAAG,MAAM;IAClCP,QAAQ,CAACX,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAChCW,QAAQ,CAACV,eAAe,CAAC,KAAK,CAAC,CAAC;EACnC,CAAC;EAED,oBACG,QAAC,GAAG;IAAC,EAAE,EAAEE,gBAAgB,CAACU,KAAK,CAAE;IAAA,wBAC9B,QAAC,UAAU;MACR,OAAO,EAAC,IAAI;MACZ,aAAa,EAAC,WAAW;MACzB,EAAE,EAAEJ,YAAY,GAAG,CAAC,GAAG,CAAE;MACzB,EAAE,EAAEA,YAAY,GAAG,CAAC,GAAG,CAAE;MACzB,EAAE,EAAE,CAAE;MAAA,2BAEOH,MAAM,CAACa,MAAM;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB,eACb,QAAC,IAAI;MAAA,wBACF,QAAC,GAAG;QAAC,EAAE,EAAE;UAAEC,SAAS,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAA,UAC9Cf,MAAM,CAACgB,GAAG,CAAEP,KAAK,iBACf,QAAC,cAAc;UAEZ,KAAK,EAAE;YACJA,KAAK,EAAEA,KAAK;YACZQ,QAAQ,EAAE,MAAMT,mBAAmB,CAACC,KAAK,CAAC;YAC1CS,OAAO,EAAET,KAAK,CAACU;UAClB;QAAE,GALGV,KAAK,CAACC,EAAE;UAAA;UAAA;UAAA;QAAA,QAOlB;MAAC;QAAA;QAAA;QAAA;MAAA,QACC,eACN,QAAC,cAAc;QACZ,KAAK,EAAE;UACJD,KAAK,EAAE,IAAI;UACXQ,QAAQ,EAAE,MAAML,sBAAsB,EAAE;UACxCM,OAAO,EAAE;QACZ;MAAE;QAAA;QAAA;QAAA;MAAA,QACH;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEZ,CAAC;AAAC,GAnDInB,UAAU;EAAA,QACER,cAAc,EACRA,cAAc,EAClBC,cAAc,EACdC,WAAW,EACdK,QAAQ;AAAA;AAAA,KALnBC,UAAU;AAqDhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}