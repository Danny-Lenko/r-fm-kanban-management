{"ast":null,"code":"var _jsxFileName = \"/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx\",\n  _s = $RefreshSig$();\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useFormikValues } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// declare module 'yup' {\n//    interface ArraySchema<T> {\n//       uniqueIn(message: string, mapper?: (a: T) => any): this;\n//    }\n// }\n\n// declare module 'yup' {\n//    interface ArraySchema<T> {\n//       uniqueIn(array: T[], message: string): this;\n//    }\n// }\n\n// Yup.addMethod(Yup.array, 'uniqueIn', function (array = [], message) {\n//    return this.test('uniqueIn', message, function (value) {\n//       return array.filter((item: any) => item === value).length < 2;\n//    });\n// });\n\nconst validateUniqueSubtasks = value => {\n  const seen = new Set();\n  const errors = [];\n  for (let i = 0; i < value.length; i++) {\n    const subtask = value[i];\n    if (seen.has(subtask)) {\n      errors[i] = 'Subtask must be unique';\n    } else {\n      seen.add(subtask);\n    }\n  }\n  return errors;\n};\nconst schema = Yup.object().shape({\n  title: Yup.string().trim().required(\"Can't be empty\"),\n  description: Yup.string().trim(),\n  subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\"))\n});\nexport const EditorFormik = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const {\n    initialValues,\n    submit\n  } = useFormikValues();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: schema,\n    onSubmit: values => submit(values),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 7\n  }, this);\n};\n_s(EditorFormik, \"C7mVacx7UNsmpRzQ6Gt1f1//0WE=\", false, function () {\n  return [useFormikValues];\n});\n_c = EditorFormik;\nvar _c;\n$RefreshReg$(_c, \"EditorFormik\");","map":{"version":3,"names":["Formik","Yup","useFormikValues","validateUniqueSubtasks","value","seen","Set","errors","i","length","subtask","has","add","schema","object","shape","title","string","trim","required","description","subtasks","array","of","EditorFormik","children","initialValues","submit","values"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/EditorFormik.tsx"],"sourcesContent":["import { Formik, FormikProps } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useFormikValues, Values } from '.';\n\ntype FormikValues = FormikProps<Values>;\n\ntype Props = {\n   children: (props: FormikValues) => React.ReactNode;\n};\n\n// declare module 'yup' {\n//    interface ArraySchema<T> {\n//       uniqueIn(message: string, mapper?: (a: T) => any): this;\n//    }\n// }\n\n// declare module 'yup' {\n//    interface ArraySchema<T> {\n//       uniqueIn(array: T[], message: string): this;\n//    }\n// }\n\n// Yup.addMethod(Yup.array, 'uniqueIn', function (array = [], message) {\n//    return this.test('uniqueIn', message, function (value) {\n//       return array.filter((item: any) => item === value).length < 2;\n//    });\n// });\n\nconst validateUniqueSubtasks = (value) => {\n   const seen = new Set();\n   const errors = [];\n\n   for (let i = 0; i < value.length; i++) {\n      const subtask = value[i];\n\n      if (seen.has(subtask)) {\n         errors[i] = 'Subtask must be unique';\n      } else {\n         seen.add(subtask);\n      }\n   }\n\n   return errors;\n};\n\nconst schema = Yup.object().shape({\n   title: Yup.string().trim().required(\"Can't be empty\"),\n   description: Yup.string().trim(),\n   subtasks: Yup.array().of(Yup.string().trim().required(\"Can't be empty\")),\n});\n\nexport const EditorFormik: React.FC<Props> = ({ children }) => {\n   const { initialValues, submit } = useFormikValues();\n\n   return (\n      <Formik\n         initialValues={initialValues}\n         validationSchema={schema}\n         onSubmit={(values) => submit(values)}\n      >\n         {children}\n      </Formik>\n   );\n};\n"],"mappings":";;AAAA,SAASA,MAAM,QAAqB,QAAQ;AAC5C,OAAO,KAAKC,GAAG,MAAM,KAAK;AAE1B,SAASC,eAAe,QAAgB,GAAG;AAAC;AAQ5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;EACvC,MAAMC,IAAI,GAAG,IAAIC,GAAG,EAAE;EACtB,MAAMC,MAAM,GAAG,EAAE;EAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAME,OAAO,GAAGN,KAAK,CAACI,CAAC,CAAC;IAExB,IAAIH,IAAI,CAACM,GAAG,CAACD,OAAO,CAAC,EAAE;MACpBH,MAAM,CAACC,CAAC,CAAC,GAAG,wBAAwB;IACvC,CAAC,MAAM;MACJH,IAAI,CAACO,GAAG,CAACF,OAAO,CAAC;IACpB;EACH;EAEA,OAAOH,MAAM;AAChB,CAAC;AAED,MAAMM,MAAM,GAAGZ,GAAG,CAACa,MAAM,EAAE,CAACC,KAAK,CAAC;EAC/BC,KAAK,EAAEf,GAAG,CAACgB,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;EACrDC,WAAW,EAAEnB,GAAG,CAACgB,MAAM,EAAE,CAACC,IAAI,EAAE;EAChCG,QAAQ,EAAEpB,GAAG,CAACqB,KAAK,EAAE,CAACC,EAAE,CAACtB,GAAG,CAACgB,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,QAAQ,CAAC,gBAAgB,CAAC;AAC1E,CAAC,CAAC;AAEF,OAAO,MAAMK,YAA6B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvD,MAAM;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGzB,eAAe,EAAE;EAEnD,oBACG,QAAC,MAAM;IACJ,aAAa,EAAEwB,aAAc;IAC7B,gBAAgB,EAAEb,MAAO;IACzB,QAAQ,EAAGe,MAAM,IAAKD,MAAM,CAACC,MAAM,CAAE;IAAA,UAEpCH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAC,GAZWD,YAA6B;EAAA,QACLtB,eAAe;AAAA;AAAA,KADvCsB,YAA6B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}