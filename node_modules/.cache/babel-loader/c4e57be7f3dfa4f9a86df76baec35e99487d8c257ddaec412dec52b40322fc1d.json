{"ast":null,"code":"import { setTaskEditing } from '../../../../../main/slices/modalSlice';\nimport { setBoards, assignActiveBoard } from '../../../../../main/slices/dataSlice';\nexport const createTask = _ref => {\n  let {\n    values,\n    cols,\n    boards,\n    activeBoard,\n    activeBoardId,\n    dispatch\n  } = _ref;\n  const activeCol = cols.find(col => col.name === values.status);\n  const newTask = {\n    ...values,\n    subtasks: values.subtasks.map(sub => ({\n      title: sub,\n      isCompleted: false\n    })),\n    completedSubtasks: 0,\n    id: activeCol.tasks.length\n  };\n  const boardsUpdated = boards.map(board => board.id !== activeBoard.id ? board : {\n    ...board,\n    columns: board.columns.map(col => col.id !== activeCol.id ? col : {\n      ...col,\n      tasks: [newTask, ...col.tasks].map((task, i) => ({\n        ...task,\n        id: i\n      }))\n    })\n  });\n  dispatch(setBoards(boardsUpdated));\n  dispatch(assignActiveBoard(activeBoardId));\n  dispatch(setTaskEditing(false));\n};","map":{"version":3,"names":["setTaskEditing","setBoards","assignActiveBoard","createTask","values","cols","boards","activeBoard","activeBoardId","dispatch","activeCol","find","col","name","status","newTask","subtasks","map","sub","title","isCompleted","completedSubtasks","id","tasks","length","boardsUpdated","board","columns","task","i"],"sources":["/home/danny/projects/r-fm-kanban-management/src/library/common/components/AppModal/EditAddTaskModal/EditorFormik/editorCreateTask.ts"],"sourcesContent":["import { setTaskEditing } from '../../../../../main/slices/modalSlice';\nimport {\n   setBoards,\n   assignActiveBoard,\n} from '../../../../../main/slices/dataSlice';\n\nexport const createTask = ({\n   values,\n   cols,\n   boards,\n   activeBoard,\n   activeBoardId,\n   dispatch,\n}: any) => {\n   const activeCol = cols.find((col: any) => col.name === values.status);\n   const newTask = {\n      ...values,\n      subtasks: values.subtasks.map((sub: any) => ({\n         title: sub,\n         isCompleted: false,\n      })),\n      completedSubtasks: 0,\n      id: activeCol!.tasks.length,\n   };\n\n   const boardsUpdated = boards.map((board: any) =>\n      board.id !== activeBoard.id\n         ? board\n         : {\n              ...board,\n              columns: board.columns.map((col: any) =>\n                 col.id !== activeCol!.id\n                    ? col\n                    : {\n                         ...col,\n                         tasks: [newTask, ...col.tasks].map(\n                            (task: any, i: number) => ({ ...task, id: i }),\n                         ),\n                      },\n              ),\n           },\n   );\n\n   dispatch(setBoards(boardsUpdated));\n   dispatch(assignActiveBoard(activeBoardId));\n   dispatch(setTaskEditing(false));\n};\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uCAAuC;AACtE,SACGC,SAAS,EACTC,iBAAiB,QACb,sCAAsC;AAE7C,OAAO,MAAMC,UAAU,GAAG,QAOf;EAAA,IAPgB;IACxBC,MAAM;IACNC,IAAI;IACJC,MAAM;IACNC,WAAW;IACXC,aAAa;IACbC;EACE,CAAC;EACH,MAAMC,SAAS,GAAGL,IAAI,CAACM,IAAI,CAAEC,GAAQ,IAAKA,GAAG,CAACC,IAAI,KAAKT,MAAM,CAACU,MAAM,CAAC;EACrE,MAAMC,OAAO,GAAG;IACb,GAAGX,MAAM;IACTY,QAAQ,EAAEZ,MAAM,CAACY,QAAQ,CAACC,GAAG,CAAEC,GAAQ,KAAM;MAC1CC,KAAK,EAAED,GAAG;MACVE,WAAW,EAAE;IAChB,CAAC,CAAC,CAAC;IACHC,iBAAiB,EAAE,CAAC;IACpBC,EAAE,EAAEZ,SAAS,CAAEa,KAAK,CAACC;EACxB,CAAC;EAED,MAAMC,aAAa,GAAGnB,MAAM,CAACW,GAAG,CAAES,KAAU,IACzCA,KAAK,CAACJ,EAAE,KAAKf,WAAW,CAACe,EAAE,GACtBI,KAAK,GACL;IACG,GAAGA,KAAK;IACRC,OAAO,EAAED,KAAK,CAACC,OAAO,CAACV,GAAG,CAAEL,GAAQ,IACjCA,GAAG,CAACU,EAAE,KAAKZ,SAAS,CAAEY,EAAE,GACnBV,GAAG,GACH;MACG,GAAGA,GAAG;MACNW,KAAK,EAAE,CAACR,OAAO,EAAE,GAAGH,GAAG,CAACW,KAAK,CAAC,CAACN,GAAG,CAC/B,CAACW,IAAS,EAAEC,CAAS,MAAM;QAAE,GAAGD,IAAI;QAAEN,EAAE,EAAEO;MAAE,CAAC,CAAC;IAEpD,CAAC;EAEZ,CAAC,CACR;EAEDpB,QAAQ,CAACR,SAAS,CAACwB,aAAa,CAAC,CAAC;EAClChB,QAAQ,CAACP,iBAAiB,CAACM,aAAa,CAAC,CAAC;EAC1CC,QAAQ,CAACT,cAAc,CAAC,KAAK,CAAC,CAAC;AAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}